{"name":"PoolCheck","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/svg/dice-target.svg","scope":"global","command":"//console.log(args);\nlet pool = new Innocenti.PoolCheck(game.user,token);\npool.Check(...args);","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_mpw7hmp31od","path":"Automação Master","color":"#0080ff"},"core":{"sourceId":"Compendium.innocenti-actions.automation-macros.Ykra1KjpK4huzFoq"}},"_id":"0GKbytoOUER7JbHE"}
{"_id":"1WjzN8HKjr3Q02W6","name":"DAERollTable","type":"script","author":"X4uo406iXTm4HkVN","img":"icons/svg/d20.svg","scope":"global","command":"//DAERollTable Tablename\nif(args[0] === \"each\"){\n    game.tables.getName(args[1]).draw();\n}","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}}}
{"_id":"1rqDqtjNNPzhH73i","name":"RollTable: Orientation","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/tools/navigation/compass-brass-blue-red.webp","scope":"global","command":"game.tables.getName(\"Orientation\").draw();","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Orientation","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_vd9wmfl2y6","path":"Roll Tables","color":"#008000"},"core":{"sourceId":"Compendium.innocenti-worlds.macros-houserules.1rqDqtjNNPzhH73i"}}}
{"_id":"51UjG9KrG0bzOCqO","name":"Reoccuring Effect","type":"script","author":"iv1xD7Xolui8SRLL","img":"systems/dnd5e/icons/skills/affliction_02.jpg","scope":"global","command":"// arguments\n//args[0] --> \"on\", \"each\", \"off\"\n//args[1] --> the level the spell was cast (usually @item.level)\n//args[2] --> save allowed (\"yes\"/\"no\"), e.g. damage effects that can only be ended using an action)\n//args[3] --> damage mode \n//              \"none\" for effects without damage\n//              \"flat\" for fixed damage from argument baseDamage\n//              \"scaling\" for damage scaling based on castLevel\n//args[4] --> damage type\n//args[5] --> baseDamage (e.g. 1d6)\n//args[6] --> scalingDieCount (e.g. 2 for 2dX scaling per spell level)\n//args[7] --> scalingDieSize (e.g. d6 for Xd6 scaling per spell level)\n//args[8] --> saveType (if spell does not contain a saving throw, e.g. Paladin smites)\n//args[9] --> flat DC\n\nif (args[0] === \"each\") {\n\n  const lastArg = args[args.length-1];\n  const castLevel = args[1];\n  const saveAllowed = args[2];\n  const damageMode = args[3];\n  const damageType = args[4];\n  const baseDamage = args[5];\n  const scalingDieCount = args[6];\n  const scalingDieSize = args[7];\n  let saveType = args[8];\n  let dc = args[9];\n\n  let target;\n  if (lastArg.tokenId) target = canvas.tokens.get(lastArg.tokenId);\n    else target = game.actors.get(lastArg.actorId).getActiveTokens(0);\n  const effect = lastArg.effectId;\n  const casterItem = lastArg.efData.flags.dae.itemData;\n  const casterItemLevel = casterItem.data.level;\n  const [_1, casterId, _2, _3] = lastArg.efData.origin.split(\".\")\n  const caster = game.actors.get(casterId);\n  const casterT = caster.isToken ? caster.token : caster.getActiveTokens[0];\n\n  let effectEnds;\n  \n  //Determine saveType and dc if save is allowed and ask for save\n  //Priority for save: 1) values in args[8] and args[9]\n  //          2) values stored in the item\n  if (saveAllowed === \"yes\") {\n      if (saveType === null) {\nChatMessage.create({ content: \"Hallo\" });   \n        saveType = casterItem.data.save.ability;\n        dc = casterItem.data.save.dc;\n      }\n      const flavor = `${CONFIG.DND5E.abilities[saveType]} DC${dc} ${casterItem.name}`;  \n      let save = (await target.actor.rollAbilitySave(saveType, {flavor, fastforward: true, chatMessage: true}));\n      if (save.total >= dc) effectEnds = true;\n        else effectEnds = false;\n  } else effectEnds = false;\n\n\n  //Delete effect if saved; otherwise do damage, if effect has damage over time\n  if (effectEnds) {\n    if (target) target.actor.deleteEmbeddedEntity(\"ActiveEffect\", effect);\n  } else {\n    let damageRoll;\n    if (damageMode != \"none\") {\n      let damageFormula;\n      if (damageMode === \"scaling\" && castLevel-casterItemLevel > 0) {\n        damageFormula = baseDamage + \"+\" + (castLevel-casterItemLevel) * scalingDieCount + scalingDieSize;\n      } else {\n        damageFormula = baseDamage;\n      }\n      damageRoll = new Roll(damageFormula).roll();\n      new MidiQOL.DamageOnlyWorkflow(caster, casterT, damageRoll.total, damageType, [target], damageRoll, {flavor: `Damage for ${casterItem.name}`, itemCardId: \"new\", itemData: casterItem})\n    }\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"exportSource":{"world":"testWorld","system":"dnd5e","coreVersion":"0.7.9","systemVersion":"1.2.4"},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}}}
{"_id":"88LJ6VPHI1cZEGsj","name":"#[CF_tempEntity]","type":"chat","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"cf":{"id":"temp_vd9wmfl2y6","path":"Roll Tables","color":"#008000","name":"Roll Tables","children":["w8MExLHMIGt1K4KO","HEbMljxKEOZBEgYp","ilOnM4PONpYPZ8uV","1rqDqtjNNPzhH73i","GCmalnLgLekr0TXS","O44VSFhNABFnWEKn","9XQHDok9nVWOSKVz"],"folderPath":[]}}}
{"name":"Encounter","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/environment/wilderness/mine-interior-dungeon-door.webp","scope":"global","command":"let encounter = new InnocentiEncounters.Encounters();\nlet tableName = `Encounter ${game.scenes.active.name}`\nawait encounter.RollTable(tableName)","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.YnoukCtSVrv8t8XZ"}},"_id":"8MWGpV59eYV8Tb3f"}
{"_id":"8VJiqz5mdiN7Qgga","name":"DAEAurax","type":"script","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/spells/wind-grasp-magenta-2.jpg","scope":"global","command":"// DAEAura @token @item self\nconsole.log(args);\nlet atoken = canvas.tokens.get(args[1]);\nlet lastArg = args[args.length-1];\nlet effectId = lastArg.effectId;\nlet atarget=[];\nlet self = (args[3]!== lastArg && args[3] == 'self') ? true : false;\nif(args[0] === 'on' || args[0] === 'each'){\n    if(self && atoken.actor.id != lastArg.actorId) return;\n    canvas.tokens.placeables.map(entity=>{\n        entity.actor.effects.map(ef=>{\n            if(ef.data.origin == lastArg.origin && ef.data.label == lastArg.efData.label){\n                if(entity.actor.id == lastArg.actorId && self){\n                    atarget.push(entity);\n                }else if(entity.actor.id != lastArg.actorId){\n                    atarget.push(entity);\n                }\n            }\n        });\n    });\n    console.log(atoken, atarget);\n    let saveTargets = game.user.targets;\n        game.user.targets = new Set(atarget);\n        try {\n            let damageItem = (typeof args[2] === 'string') ? atoken.actor.items.find(i => i.name === args[2]) : atoken.actor.items.find(i => i.id === args[2]._id);\n            console.log(damageItem);\n            damageItem.roll();\n        } finally {\n            game.user.targets = saveTargets;\n        }\n    \n}","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}}}
{"_id":"8oJ4SPjhNWFb7Fn1","name":"DAEConditions","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/svg/aura.svg","scope":"global","command":"// args[0] = conditions\n//args[1] = tactor;\nlet rm = 0;\nlet verif;\nlet sTypes;\n    if(args[0] != false){\n        for (let c of args[0]){\n            let cond = c.split(':');\n            cond[0] = cond[0].trim();\n            switch (cond[0]) {\n                case 'Condition':\n                    if(game.cub.hasCondition(cond[1].trim(), args[1])) rm ++;\n                    break;\n                case 'Size':\n                    sTypes = cond[1].trim().split(',');\n                    if(sTypes.includes(args[1].data.data.traits.size)) rm++;\n                    break;\n                case 'Alignment':\n                    verif = args[1].data.data.details.alignment.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                case 'Type':\n                    verif = args[1].data.data.details.type.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                default:\n            }\n        }\n    }\n    return rm;","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Compendium.innocenti-worlds.macros-houserules.8oJ4SPjhNWFb7Fn1"}}}
{"name":"RollTable: Complications Research","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/sundries/books/book-embossed-gold-red.webp","scope":"global","command":"game.tables.getName(\"Complications Research\").draw();","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Research Complications","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_vd9wmfl2y6","path":"Roll Tables","color":"#008000"},"core":{"sourceId":"Compendium.innocenti-worlds.macros-houserules.GCmalnLgLekr0TXS"}},"_id":"9XQHDok9nVWOSKVz"}
{"name":"Set Elevation","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/svg/mountain.svg","scope":"global","command":"let applyChanges = false;\n\nif(args && args.length>0){\nconsole.log(args);\n  let enterval=parseFloat(args[0]);\n  let exitval= args.length>1?parseFloat(args[1]):null;\n  let elevation=0;\n  if(event && event === MLT.ENTER)\n    elevation = enterval;\n  else if(event ** event === MLT.LEAVE)\n    elevation = exitval;\n    token.update({\n        \"elevation\": elevation\n    });\n}\nelse\n{\n    new Dialog({\n    title: `Token Elevation Changer`,\n    content: `\n      <form>\n        <div class=\"form-group\">\n          <label>Elevation Value:</label>\n          <input id=\"token-elevation\" name=\"token-elevation\" type=\"number\" step=\"1\" value=\"0\"/>\n        </div>\n      </form>\n      `,\n    buttons: {\n      yes: {\n        icon: \"<i class='fas fa-check'></i>\",\n        label: `Apply Changes`,\n        callback: () => applyChanges = true\n      },\n      no: {\n        icon: \"<i class='fas fa-times'></i>\",\n        label: `Cancel Changes`\n      },\n    },\n    default: \"yes\",\n    close: html => {\n      if (applyChanges) {\n        for ( let token of canvas.tokens.controlled ) {\n        let elevation = html.find('[name=\"token-elevation\"]')[0].value || \"0\";\n        token.update({\n            \"elevation\": parseFloat(elevation)\n        });\n        //token.data.elevation=parseInt(elevation);\n\n        }\n      }\n    }\n  }).render(true);\n}","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"core":{"sourceId":"Macro.CpL3YgGgMfvubvuq"},"cf":{"id":"temp_jhclp2bqm3","path":"Automação","color":"#000000"}},"_id":"9iDHQ3eKA7Kh17Uv"}
{"_id":"9x6dLAlAaqygjfmS","name":"DAEAura","type":"script","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","scope":"global","command":"// DAEAura @token\nif(args[1] == 0) return;\nif(args[0] == \"off\") return;\nlet atarget=[];\nconst lastArg = args[args.length-1];\nif(args[0] == \"each\" || \"on\") {\n    let damage = \"1d6\";\n    let dtype = \"\";\n\n    let org = lastArg.origin.split('.');\n    let aactor = game.actors.get(org[1]);\n    console.log(aactor, \"ACtor\");\n    let tactor = canvas.tokens.get(lastArg.tokenId);\n    let item = aactor.items.find(i => i.id === org[3]);\n    let ttoken = await canvas.tokens.placeables.find(x=>x.actor.id == org[1]);\n    console.log(ttoken, \"token\");\n    let saveTargets = game.user.targets;\n    game.user.targets = new Set(atarget);\n    try {\n            item.roll();\n        } finally {\n            game.user.targets = saveTargets;\n        }\n    \n    \n    /*\n    let damageRoll = new Roll(damage).roll(); // could be passed as an argument\n    new MidiQOL.DamageOnlyWorkflow(aactor, ttoken, damageRoll.total, dtype, [tactor], damageRoll, {flavor: `Damage from Aura ${item.name} - damage type ${dtype}`, item})\n    */\n}","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}}}
{"_id":"GCmalnLgLekr0TXS","name":"RollTable: Research Complications","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Research Complications","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_vd9wmfl2y6","path":"Roll Tables","color":"#008000"}},"scope":"global","command":"game.tables.getName(\"Research Complications\").draw();","author":"X4uo406iXTm4HkVN","img":"icons/sundries/books/book-embossed-gold-red.webp","actorIds":[]}
{"_id":"HEbMljxKEOZBEgYp","name":"RollTable: Complications","type":"script","author":"7qbBJORkk2z0FBTX","img":"systems/dnd5e/icons/skills/red_28.jpg","scope":"global","command":"game.tables.getName(\"Complications\").draw();","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Complications","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_vd9wmfl2y6","path":"Roll Tables","color":"#008000"},"core":{"sourceId":"Compendium.innocenti-worlds.macros-houserules.HEbMljxKEOZBEgYp"}}}
{"_id":"Hfmoyuuz29aupbRc","name":"DAESelfRepeat","type":"script","author":"X4uo406iXTm4HkVN","img":"assets/icons/icones-flat/Icon.2_72.png","scope":"global","command":"// usado apra marcar qual inimigo vai repetir o ataque\n// SelfRepeat Engulf end\n\nconst lastArg = args[args.length-1];\nlet effectId = lastArg.effectId;\nlet macroRepeat = (args[2] && args[2] != lastArg)? 'endEveryTurn':'startEveryTurn';\n\nconsole.log(\"Self Repeat args are \", ...args);\nlet tgtoken;\nlet tgactor;\nif (lastArg.tokenId){\n    tgtoken = canvas.tokens.get(lastArg.tokenId);\n    tgactor = tgtoken.actor;\n} \nelse tgactor = game.actors.get(lastArg.actorId);\n\nlet org = lastArg.origin.split('.');\nlet orgItem = lastArg.efData.flags.dae.itemData;\nlet aCondition = orgItem.data.activation.condition;\nlet conditions = (aCondition)? aCondition.split(',') : false;\n\nlet REPEAT_EFFECT = {\n    label: `Repeat_${tgtoken.name}`,\n    icon: lastArg.efData.icon,\n    changes: [\n      {key: \"macro.execute\", \n      value: `DAEAttack ${_token.id} ${lastArg.tokenId} ${args[1]}`, \n      mode: ACTIVE_EFFECT_MODES.CUSTOM\n      }\n    ],\n    flags: {\n        dae: {\n            macroRepeat: macroRepeat\n        }\n    },\n    transfer: true,\n  };\n  if(args[0] === 'on'){\n    let activeConditions = await _token.actor.getEmbeddedCollection(\"ActiveEffect\")\n    .find(a=> a.label === `Repeat_${tgtoken.name}`);\n    if(!activeConditions){\n        let upItem = Object.assign(REPEAT_EFFECT, {_id: lastArg.efData._id});\n        await _token.actor.createEmbeddedDocuments(\"ActiveEffect\", [REPEAT_EFFECT]);  \n    }\n  }","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"},"advanced-macros":{"runAsGM":false}}}
{"name":"#[CF_tempEntity]","type":"chat","author":"7qbBJORkk2z0FBTX","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"cf":{"id":"temp_mpw7hmp31od","path":"Automação Master","color":"#0080ff","name":"Automação Master","children":["QFyXGsZyqwF9PJsx","WgKU9GlTKodYoYP9","KZsUSh8aM9y82kS8","RZWBHzh5kWDQYVtu","0GKbytoOUER7JbHE","yJWOaVbW4tjGaRU6","pDtWqqTT4x7lyxBb","WS7aLJxi9bFB7iNk"],"folderPath":[]}},"_id":"HgTI6pMit9aseCG1"}
{"name":"Open Chest","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/containers/chest/chest-reinforced-box-brown.webp","scope":"global","command":"let actions = new InnocentiOpenLock.Actions('OpenLock');","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.UXJLvaOUS8ANMPkp"},"furnace":{"runAsGM":false}},"_id":"JO7Iw6Jkrc0pntYd"}
{"_id":"KGYWNvGt3zgVU1A9","name":"Invisibility","type":"script","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/spells/fog-sky-2.jpg","scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target\n\nlet target = canvas.tokens.get(args[1])\nif (args[0] === \"on\") {\n    ChatMessage.create({ content: `${target.name} turns invisible` });\n    target.update({ \"hidden\": true });\n}\nif (args[0] === \"off\") {\n    ChatMessage.create({ content: `${target.name} re-appears` });\n    target.update({ \"hidden\": false });\n}","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}}}
{"name":"CUB-Conditions","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/svg/dice-target.svg","scope":"global","command":"let mapsetting = game.settings.get('combat-utility-belt', \"activeConditionMap\");\n\nmapsetting.forEach(element =>\n    {\n    element.activeEffect = game.items.getName(`CUB-${element.name}`)?.data.effects.contents[0];\n    }\n )\n\ngame.settings.set('combat-utility-belt', \"activeConditionMap\", mapsetting);","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"cf":{"id":"temp_jhclp2bqm3","path":"Automação","color":"#000000"}},"_id":"KLCMPcexJHA0PVi1"}
{"name":"Checks","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/svg/dice-target.svg","scope":"global","command":"//args[0] = skill\n//args[1] = dificult\n//args[2] = sucess\n//args[3] = fail\n//args[4] = flags\n//console.log(token.id,game.user.id,args);\nconsole.log(args);\nlet checks = new Innocenti.Checks(game.user,token);\nchecks.Check(...args);","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_mpw7hmp31od","path":"Automação Master","color":"#0080ff"},"core":{"sourceId":"Compendium.innocenti-actions.automation-macros.ksHWjfSLEJIPPbFA"}},"_id":"KZsUSh8aM9y82kS8"}
{"_id":"O44VSFhNABFnWEKn","name":"RollTable: Segredos dos Personagens","type":"script","author":"7qbBJORkk2z0FBTX","img":"systems/dnd5e/icons/skills/red_25.jpg","scope":"global","command":"game.tables.getName(\"Segredos dos Personagens\").draw();","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_vd9wmfl2y6","path":"Roll Tables","color":"#008000"},"core":{"sourceId":"Compendium.innocenti-worlds.macros-houserules.O44VSFhNABFnWEKn"}}}
{"name":"Actions","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/svg/dice-target.svg","scope":"global","command":"//game.macros.entities.find(i => i.name === 'GMActions').execute(game.user.id,token.id,...args);\nconsole.log(\"AAAAA\", args)\n\nlet checks = new Innocenti.Actions(game.user,token);\nchecks.Check(...args);","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_mpw7hmp31od","path":"Automação Master","color":"#0080ff"},"core":{"sourceId":"Compendium.innocenti-actions.automation-macros.phR02tAbyeMZDESJ"}},"_id":"QFyXGsZyqwF9PJsx"}
{"name":"DAESwallow","type":"script","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","scope":"global","command":"//DAESwallow \"tiny,sm,med,lg,huge,grg\" Grappled\nconst lastArg = args[args.length-1];\nlet tactor; \nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nelse tactor = game.actors.get(lastArg.actorId);\nlet allowSizes = args[1].split(',');\nlet allowSwallow = false;\n\nasync function CheckSwollow(tactor, allowSizes){\n    if(!allowSizes.includes(tactor.data.data.traits.size)) return;\n    if(!game.cub.hasCondition(\"Restrained\", tactor)) return;\n    return true;\n}\n\nasync function RemoveAE(tactor, effectName){\n    let eff = tactor.getEmbeddedCollection(\"ActiveEffect\");\n    let effact = eff.find(a=>a.data.label == effectName);\n    await tactor.deleteEmbeddedDocuments(\"ActiveEffect\", [effact.id]);\n}\n\nif(args[0] == \"on\"){\n    allowSwallow = (await CheckSwollow(tactor, allowSizes));\n    if(allowSwallow){\n        console.log(\"PODE SER ENGULIDO\");\n        await RemoveAE(tactor, args[2]);\n    }\n}\n\nif(args[0] == \"each\"){\n    \n}\n\nif(args[0] == \"off\"){\n    \n}","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}},"_id":"R8La8H8b6C1upZRk"}
{"name":"Passive","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/svg/dice-target.svg","scope":"global","command":"//args[0] = dificult\n//args[1] = sucess\n//args[2] = fail\n//args[3] = flags\n//console.log(token.id,game.user.id,args);\n//console.log(args);\nlet checks = new Innocenti.PassiveCheck(game.user,token);\nchecks.Check(...args);","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_mpw7hmp31od","path":"Automação Master","color":"#0080ff"},"core":{"sourceId":"Compendium.innocenti-actions.automation-macros.iZtERDX5QcwSjNxV"}},"_id":"RZWBHzh5kWDQYVtu"}
{"_id":"RkAsCLVcGEDyK8We","name":"#[CF_tempEntity]","type":"chat","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000","name":"DAE","children":["qIRyPTF4E1p6VT8r","hpkqSIiiNHkFWYpO","Zkr624s95L1GMhDn","9x6dLAlAaqygjfmS","kFAk71loNB02sUsD","8oJ4SPjhNWFb7Fn1","Rue2uR5U72u8ND7v","octT6lsJNX0dCiKV","gPmEcO9hroTTBH7t","1WjzN8HKjr3Q02W6","Hfmoyuuz29aupbRc","lUvYFZQ8Ls6tncil","NFOnsUtAmd6FbndR","51UjG9KrG0bzOCqO","qozoBrs5Q7KT49Mm","VGYTyo5xF7Bs2Vlb","8VJiqz5mdiN7Qgga","lsauMPfelmTKiq2E","KGYWNvGt3zgVU1A9","R8La8H8b6C1upZRk","vnuUB4X4tTpFh5CF"],"folderPath":[]}}}
{"_id":"Rue2uR5U72u8ND7v","name":"DAEDamage","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/skills/wounds/blood-spurt-spray-red.webp","scope":"global","command":"// DAEDamage damege type\n\nconst lastArg = args[args.length-1];\nlet atype = args[2]\nlet adamage = args[1]\nlet ttoken = DAE.DAEfromUuid(lastArg.tokenUuid); // better since it gets the token no matter what scene it is on\nlet casterItem = DAE.DAEfromUuid(lastArg.origin); // better since it gets the item on the synthetic actor\nlet aactor = casterItem.actor;\nif (aactor.uuid === lastArg.actorUuid) return; // don't trigger on the troll\nconsole.log(casterItem, args, \"ORGS\");\n\nif (args[0] === \"each\" || \"on\") {\n    let damageRoll = new Roll(adamage,{async:false}).roll();\n    new MidiQOL.DamageOnlyWorkflow(aactor,null,damageRoll.total,atype,[ttoken], damageRoll,{itemCardId: \"new\", itemData:casterItem.data});\n}","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"},"advanced-macros":{"runAsGM":true}}}
{"_id":"VGYTyo5xF7Bs2Vlb","name":"DAE Life Drain","type":"script","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/violet_28.jpg","scope":"global","command":"const lastArg = args[args.length-1];\nlet adamage = args[1];\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n\n\nif (args[0] === \"on\") {\n    let max = tactor.data.data.attributes.hp.max - (adamage);\n    tactor.update ({\n        \"data.attributes.hp.max\": max\n    });\n}\nif (args[0] === \"off\") {\n    let max = tactor.data.data.attributes.hp.max + (adamage);\n    tactor.update ({\n        \"data.attributes.hp.max\": max\n    });\n}","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}}}
{"name":"UpdateTempHP","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/svg/heal.svg","scope":"global","command":"let target = canvas.tokens.get(args[1]);\nif (!target) {\n  ChatMessage.create({content: `Token ${args[1]} is no longer in scene`, whisper: ChatMessage.getWhisperIDs(\"GM\")})\n  return;\n}\nlet increment = args[2];\nlet temphpMax = (target.actor.data.data.attributes.hp.tempmax < increment)? increment:target.actor.data.data.attributes.hp.tempmax;\nlet temphp = (target.actor.data.data.attributes.hp.tempmax < increment)? increment:target.actor.data.data.attributes.hp.temp;\n\nif (args[0] === \"on\") {\n  target.actor.update({\"data.attributes.hp.tempmax\": temphpMax, \"data.attributes.hp.temp\": temphp})\nChatMessage.create({content: `Meal: ${target.name} received ${increment} HP temp`})\n} else {\n  target.actor.update({\"data.attributes.hp.tempmax\": 0, \"data.attributes.hp.temp\": 0})\nChatMessage.create({content: `Meal Expiry: ${target.name} Temp HP reduced by 0`})\n}","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_mpw7hmp31od","path":"Automação Master","color":"#0080ff"},"core":{"sourceId":"Compendium.innocenti-actions.automation-macros.scYvZN9M9svLXQpQ"}},"_id":"WS7aLJxi9bFB7iNk"}
{"name":"CheckItem","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/svg/dice-target.svg","scope":"global","command":"let checks = new Innocenti.CheckItem(game.user,token);\nchecks.Check(...args);","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_mpw7hmp31od","path":"Automação Master","color":"#0080ff"},"core":{"sourceId":"Compendium.innocenti-actions.automation-macros.phR02tAbyeMZDESJ"}},"_id":"WgKU9GlTKodYoYP9"}
{"name":"Find Trap","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/tools/scribal/magnifying-glass.webp","scope":"global","command":"let actions = new InnocentiOpenLock.Actions('FindLockTrap');","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.4MODdS79QhACoEd9"},"furnace":{"runAsGM":false}},"_id":"YLnXv63k3xK5OIRB"}
{"name":"Update Unlinked Tokens to Actors","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/svg/dice-target.svg","scope":"global","command":"(async () => {\n    let aName = \"Eternal Flame Guardian\";\n    let tactor = game.actors.getName(aName);\n    let tokens = canvas.tokens.controlled;\n    for (var tok of canvas.tokens.controlled) {\n        tok.update({actorId: tactor._id})\n       console.log(tok)\n    }\n    \n})();","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_jhclp2bqm3","path":"Automação","color":"#000000"},"core":{"sourceId":"Compendium.innocenti-actions.automation-macros.egoPB0H7IIZFYlyA"}},"_id":"ZBRzuX1iajd8ynKT"}
{"_id":"Zkr624s95L1GMhDn","name":"DAEAttackEnd","type":"script","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/violet_20.jpg","scope":"global","command":"// DAEAttackEnd @item|itemName\nif(args){\nconst lastArg = args[args.length-1];\nlet DAEConditions = game.macros.getName(\"DAEConditions\");\nconsole.log(\"ARGS\",args);\n\nlet ttoken =  canvas.tokens.get(lastArg.tokenId);\nlet tactor = ttoken.actor;\n\nlet org = (lastArg.origin != undefined) ? lastArg.origin.split('.') : args[1];\n\nconsole.log(ttoken.name);\n\nlet item= tactor.items.getName(args[1]);\n\nconsole.log(\"DAMAGE\",item);\nlet aCondition = item.data.data.activation.condition;\nlet conditions = (aCondition) ? aCondition.split(';'):false;\nconsole.log(\"Conditions\",conditions, aCondition);\n\nlet rm = await DAEConditions.execute(conditions, tactor);\n\nif(args[0] == \"off\"){\n    if((conditions && rm == conditions.length) || conditions == false){\n         new MidiQOL.DamageOnlyWorkflow(actor, token, damageRoll.total, dtype, [token], damageRoll, {flavor: `Failed Save for ${item.name} - damage type ${dtype}`, item});\n    }\n}\n}","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}}}
{"_id":"hpkqSIiiNHkFWYpO","name":"DAEAttack","type":"script","author":"7qbBJORkk2z0FBTX","img":"systems/dnd5e/icons/skills/weapon_23.jpg","scope":"global","command":"// DAEAttack itemName\n\n//console.log(\"ON ATACK\", args);\nif(!args) return;\nconst lastArg = args[args.length-1];\nlet ttoken = DAE.DAEfromUuid(lastArg.tokenUuid);\nlet tactor = ttoken.actor;\nlet ownItem = DAE.DAEfromUuid(lastArg.origin);\nlet aactor = ownItem.actor;\nlet item = aactor.items.find(i => i.name === args[1]);\n\nasync function CheckAttack(){\n    let aef = tactor.getEmbeddedCollection(\"ActiveEffect\").find(a => a.data.label == \"Unconscious\" || a.data.label == \"Dead\");\n    if(aef) return;\n    let DAEConditions = game.macros.getName(\"DAEConditions\");\n    let aCondition = item.data.data.activation.condition;\n    let conditions = (aCondition) ? aCondition.split(';'):false;\n    let rm = (await DAEConditions.execute(conditions, tactor));\n    if((aactor.uuid === lastArg.actorUuid) || (conditions != false && rm != conditions.length)) return;\n    return true;\n}\n\n\nif(args[0] === \"on\" || \"each\"){\n    let attpempt = (await CheckAttack(tactor, item));\n    if(!attpempt || !item) return;\n    //console.log(\"ITEM\", item);\n    item.roll();\n}\n\n/*\nlet DAEConditions = game.macros.getName(\"DAEConditions\");\nconsole.log(\"ARGS\",args);\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nif (args.length > 3) tactor = canvas.tokens.get(args[2]).actor;\n\nlet org = (lastArg.origin != undefined)?lastArg.origin.split('.'):args[1];\nlet atoken = (args.length > 3) ? canvas.tokens.get(args[1]) : _token;\n\nlet item;\n\nlet origitem = lastArg.efData.flags.dae.itemData;\nif(args.length < 3) item = atoken.actor.items.find(i => i.id === origitem._id);\nif(args.length == 3) item = (typeof args[1] === 'string') ? atoken.actor.items.find(i => i.name === args[1]) : atoken.actor.items.find(i => i.id === args[1]._id);\nif(args.length > 3) item = (typeof args[3] === 'string') ? atoken.actor.items.find(i => i.name === args[3]) : atoken.actor.items.find(i => i.id === args[3]._id);\n\n\nconsole.log(\"DAMAGE\",item, origitem);\nlet aCondition = (origitem)?origitem.data.activation.condition: item.data.data.activation.condition;\nlet conditions = (aCondition) ? aCondition.split(';'):false;\nconsole.log(\"Conditions\",conditions, aCondition);\n\nlet rm = await DAEConditions.execute(conditions, tactor);\nif(args[0] == \"on\"){\n    if((conditions && rm == conditions.length) || conditions == false){\n        item.roll();\n    }\n}else if(args[0] == \"each\"){\n    if((conditions && rm == conditions.length) || conditions == false){\n        item.roll();\n    }else{\n        await atoken.actor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n    }\n}\n*/","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"},"core":{"sourceId":"Compendium.innocenti-worlds.macros-houserules.hpkqSIiiNHkFWYpO"}}}
{"_id":"ilOnM4PONpYPZ8uV","name":"RollTable: Erro Crítico","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Erro Critico","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_vd9wmfl2y6","path":"Roll Tables","color":"#008000"}},"scope":"global","command":"game.tables.getName(\"Erro Crítico\").draw();","author":"X4uo406iXTm4HkVN","img":"icons/svg/d20-black.svg","actorIds":[]}
{"_id":"kFAk71loNB02sUsD","name":"DAECenterToken","type":"script","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/yellow_34.jpg","scope":"global","command":"//@token\nconst lastArg = args[args.length-1];\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId);\nlet atoken = canvas.tokens.get(args[1])\n\nif(args[0] === 'on'){\n    tactor.update({x: atoken.center.x, y: atoken.center.y});\n}","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}}}
{"name":"Set Patrol","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/svg/dice-target.svg","scope":"global","command":"await canvas.tokens.controlled.forEach(x=>{\n    canvas.tokens.documentCollection.map(y=>{\n        if(y.uuid == x.document.uuid){\n            let patrol = y.getFlag(\"patrol\",\"enablePatrol\") ?? false;\n            let spoot = y.getFlag(\"patrol\",\"enableSpotting\") ?? false;\n            y.setFlag(\"patrol\",\"enablePatrol\", !patrol);\n            y.setFlag(\"patrol\",\"enableSpotting\", !spoot);\n           //console.log(\"Name\", patrol); \n        }\n    });\n    ui.notifications.info(\"Todos patrulhando\");\n});","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"cf":{"id":"temp_jhclp2bqm3","path":"Automação","color":"#000000"}},"_id":"kJGGa17ttZVJIsBk"}
{"_id":"lY7rFamaw1eEkRqA","name":"SeeID","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/svg/dice-target.svg","scope":"global","command":"//Display Name & IDs\nfor(let token of canvas.tokens.controlled)\n{\n    ChatMessage.create({\n        content : token.name + \" \" + token.id\n    });\n}\n\nfor(let wall of canvas.walls.controlled)\n{\n    ChatMessage.create({\n        content : wall.name + \" \" + wall.id\n    })\n}\n/*\nfor(let light of canvas.lighting.activate)\n{\n    ChatMessage.create({\n        content : light.name + \" \" + light.id\n    })\n}\nfor (let note of canvas.notes.placeables)\n{\n    ChatMessage.create({\n        content :  note.name + \" \" + note.id\n     });\n}\n*/\nfor (let draw of canvas.drawings.controlled)\n{\n   ChatMessage.create({\n      content :  draw.name + \" \" + draw.id\n   });\n}\n\nfor (let tile of canvas.activeLayer.controlled)\n{\n    ChatMessage.create({\n        content :  tile.name + \" \" + tile.id\n     });\n}","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_jhclp2bqm3","path":"Automação","color":"#000000"},"core":{"sourceId":"Compendium.innocenti-actions.automation-macros.MuNTG5b6wHoDpuUe"}}}
{"_id":"lsauMPfelmTKiq2E","name":"EnlargeReduce","type":"script","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/spells/link-blue-2.jpg","scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target \n\n/**\n * For each target, the GM will have to choose \n */\nlet target = canvas.tokens.get(args[1]);\nlet originalSize = target.data.width;\nlet mwak = target.actor.data.data.bonuses.mwak.damage;\n\nif (args[0] === \"on\") {\n    new Dialog({\n        title: \"Enlarge or Reduce\",\n        buttons: {\n            one: {\n                label: \"Enlarge\",\n                callback: () => {\n                    let bonus = mwak + \" 1d4\";\n                    let enlarge = (originalSize + 1);\n                    target.actor.update({ \"data.bonuses.mwak.damage\": bonus });\n                    target.update({ \"width\": enlarge, \"height\": enlarge });\n                    target.actor.setFlag('world', 'enlageReduceSpell', {\n                        size: originalSize,\n                        ogMwak: mwak,\n                    });\n                    ChatMessage.create({ content: target.name + \" is enlarged\" });\n                }\n            },\n            two: {\n                label: \"Reduce\",\n                callback: () => {\n                    let bonus = mwak + \" -1d4\";\n                    let size = originalSize;\n                    let newSize = (size > 1) ? (size - 1) : (size - 0.3);\n                    target.actor.update({ \"data.bonuses.mwak.damage\": bonus });\n                    target.update({ \"width\": newSize, \"height\": newSize });\n                    target.actor.setFlag('world', 'enlageReduceSpell', {\n                        size: originalSize,\n                        ogMwak: mwak,\n                    });\n                    ChatMessage.create({ content: target.name + \" is reduced\" });\n                }\n            },\n        }\n    }).render(true);\n}\nif (args[0] === \"off\") {\n    let flag = target.actor.getFlag('world', 'enlageReduceSpell');\n    target.actor.update({ \"data.bonuses.mwak.damage\": flag.ogMwak });\n    target.update({ \"width\": flag.size, \"height\": flag.size });\n    target.actor.unsetFlag('world', 'enlageReduceSpell');\n    ChatMessage.create({ content: target.name + \" is returned to normal size\" });\n}","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.tKKbvoCkf5A37rsc"},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}}}
{"_id":"octT6lsJNX0dCiKV","name":"DAEGrapple","type":"script","author":"7qbBJORkk2z0FBTX","img":"modules/combat-utility-belt/icons/grappled.svg","scope":"global","command":"// Grapple true DC\nconst lastArg = args[args.length-1];\nlet ttoken = DAE.DAEfromUuid(lastArg.tokenUuid);\nlet tactor = ttoken.actor;\n//let tactor = (lastArg.tokenId) ? ttoken.actor : game.actors.get(lastArg.actorId);\n\n//let org = lastArg.origin.split('.');\n//let aactor = (org[0]== \"Actor\")? game.actors.get(org[1]):canvas.tokens.get(org[3]).actor;\nlet skill = (tactor.data.data.skills.ath.total >= tactor.data.data.skills.acr.total) ? 'ath' : 'acr';\nlet item = DAE.DAEfromUuid(lastArg.origin);\nlet aactor = item.actor;\nlet DC = (args[2] != lastArg) ? args[2] : (args[1] != lastArg && item.data.data.save.dc)? parseInt(item.data.data.save.dc):false;\nconsole.log(\"DC\", DC, args, item);\n\nasync function CheckGrapple(tactor, item){\n    let aef = tactor.getEmbeddedCollection(\"ActiveEffect\").find(a => a.data.label == \"Unconscious\" || a.data.label == \"Dead\");\n    if(aef) return;\n    let sameName = tactor.getEmbeddedCollection(\"ActiveEffect\").filter(a => a.data.label == lastArg.efData.label);\n    if(sameName.length > 1) return;\n    let DAEConditions = game.macros.getName(\"DAEConditions\");\n    let aCondition = item.data.data.activation.condition;\n    let conditions = (aCondition) ? aCondition.split(';'):false;\n    let rm = (await DAEConditions.execute(conditions, tactor));\n    //precisa retornar só o que leva ao greaple\n    if((aactor.uuid === lastArg.actorUuid) || (conditions != false && rm != conditions.length)) return;\n    console.log(\"Conditions\", conditions, rm);\n    return true;\n}\n\nasync function Grapple(aactor, tactor, skill, dc, auto=false){\n    if(auto == true ) return;\n    let flavor = (typeof dc === 'number')?`vs DC: ${dc}`:\"\";\n    let grapple = (await tactor.rollSkill(skill, {flavor: flavor, fastforward: true}).then(async (result) => {\n        if(dc && result.total < dc ) return true;\n        let res = (await aactor.rollSkill('ath', {fastforward: true}));\n        if(result.total < res.total) return true;\n        }));\n    if(grapple) return;\n    await RemoveGrapple(tactor, lastArg.effectId);\n}\n\nasync function RemoveGrapple(tactor, effectid){\n    //let eff = tactor.getEmbeddedCollection(\"ActiveEffect\");\n    //let effact = eff.filter(a=>a.data.label == effectName);\n    await tactor.deleteEmbeddedDocuments(\"ActiveEffect\", [effectid]);\n}\n\nif (args[0] === \"on\") {\n    let attpempt = (await CheckGrapple(tactor, item));\n    if(!attpempt){ \n        await RemoveGrapple(tactor, lastArg.effectId);\n        return;\n    }\n    if(args[1] == \"auto\") return;\n    await Grapple(aactor, tactor, skill, DC, args[1])\n}\nif (args[0] === \"each\") {\n    let d = Dialog.confirm({\n        title: \"Grappler\",\n        content: \"<p>Você está agarado!</p><p>Deseja escapar do agarrão?</p>\",\n        yes: async() => {\n            let attpempt = await CheckGrapple(tactor, item);\n            if(!attpempt){ \n                await RemoveGrapple(tactor, lastArg.effectId);\n                return;\n            }\n            await Grapple(aactor, tactor, skill, DC, args[1])\n            \n        },\n        no: () => console.log(\"You chose ... poorly\"),\n        defaultYes: false\n    });\n}","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Compendium.innocenti-worlds.macros-houserules.octT6lsJNX0dCiKV"}}}
{"name":"Slipy","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/svg/dice-target.svg","scope":"global","command":"let tactor = _token.actor;\nlet dificult = args[0]??10;\nlet actorTrap = game.actors.getName(\"Trap\");\nlet item = actorTrap.items.find(a => a.name === \"Slipy\");\nlet fitem = tactor.items.find(a => a.name === \"Grampos\" || a.name === \"Crampon\");\nif(!fitem){\n    tactor.rollSkill('acr').then((result) => {\n        if(result.total < dificult){\n            new MidiQOL.TrapWorkflow(actorTrap, item, [_token], _token.center);\n        }\n        \n    })\n}else{\n    ChatMessage.create({\n        user: ChatMessage.getWhisperRecipients(\"GM\")[0],\n        content: `${_token.name} - does not slip because he is using ${fitem.name}`,\n        speaker: ChatMessage.speaker,\n        //whisper: ChatMessage.getWhisperRecipients(\"GM\"),\n        blind: false\n    });\n}","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_mpw7hmp31od","path":"Automação Master","color":"#0080ff"},"core":{"sourceId":"Compendium.innocenti-actions.automation-macros.qNdIEHjfavQHebE3"}},"_id":"pDtWqqTT4x7lyxBb"}
{"_id":"qozoBrs5Q7KT49Mm","name":"Until Save","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/magic/time/arrows-circling-pink.webp","scope":"global","command":"// Two versions one that fetches damage/save/dc from item and one that use args like \n// macro.execute CUSTOM \"Until Save\" cha 15 \n// Get some useful info.\n// active conition (requer uma condição especifica apra o efeito funcionar)\n\nconst lastArg = args[args.length-1];\n\nconsole.log(\"Until Save args are \", ...args);\nlet ttoken = DAE.DAEfromUuid(lastArg.tokenUuid);\nlet tactor = ttoken.actor;\nlet item = DAE.DAEfromUuid(lastArg.origin);\nlet aactor = item.actor;\n\nasync function CheckSave(tactor, item){\n    let aef = tactor.getEmbeddedCollection(\"ActiveEffect\").find(a => a.data.label == \"Unconscious\" || a.data.label == \"Dead\");\n    if(aef) return;\n    let DAEConditions = game.macros.getName(\"DAEConditions\");\n    let aCondition = item.data.data.activation.condition;\n    let conditions = (aCondition) ? aCondition.split(';'):false;\n    let rm = (await DAEConditions.execute(conditions, tactor));\n    console.log(\"OThER\", conditions);\n    //if(aactor.uuid === lastArg.actorUuid) return;\n    if((aactor.uuid === lastArg.actorUuid) || (conditions != false && rm != conditions.length))return;\n    return true;\n}\nasync function UntilSave(tactor, item, saveType, DC, flavor){\n   let save = (await tactor.rollAbilitySave(saveType, {flavor, fastforward: true})).total;\n   if (save >= DC){\n       await RemoveCondition(tactor,lastArg.effectId);\n       return;\n   }\n   if(!item.data.formula) return;\n   let dd = item.data.formula.split('[');\n   let dtype =(dd.length > 1) ? dd[1].slice(0, -1):item.data.damage.parts[0][1];\n   let damageRoll = new Roll(dd[0], {async:false}).roll();\n   new MidiQOL.DamageOnlyWorkflow(actor, token, damageRoll.total, dtype, [token], damageRoll, {flavor: `Failed Save for ${item.name} - damage type ${dtype}`, item})\n}\nasync function RemoveCondition(tactor, effectId){\n    await tactor.deleteEmbeddedDocuments(\"ActiveEffect\", [effectId]);\n}\n\nif (args[0] === \"on\") {\n    let attpempt = await CheckSave(tactor, item);\n    if(attpempt)return;\n    await RemoveCondition(tactor, lastArg.efData.label);\n}\nif (args[0] === \"each\") {\n    let saveType = (args[1] && args[1] != lastArg)? args[1]: item.data.data.save.ability;\n    let DC = (args[2] && args[2] != lastArg)? args[2]: item.data.data.save.dc;\n    let flavor = `${CONFIG.DND5E.abilities[saveType]} DC${DC} ${item?.name || \"\"}`;\n    UntilSave(tactor, item, saveType, DC, flavor);\n}\n\nif (args[0] === \"off\") {\n// do any clean up\n}","folder":null,"sort":0,"permission":{"default":0,"X4uo406iXTm4HkVN":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Compendium.innocenti-worlds.macros-houserules.qozoBrs5Q7KT49Mm"}}}
{"_id":"ufM9RmUEM2CWOJpp","name":"ReduceTokenSize","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/svg/degen.svg","scope":"global","command":"canvas.tokens.controlled.forEach(x=>{\n    x.update({ \"width\": 0.5, \"height\": 0.5 })\n});","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":true},"core":{"sourceId":"Macro.pq5MlHUUNiG1AvfL"},"cf":{"id":"temp_jhclp2bqm3","path":"Automação","color":"#000000"}}}
{"_id":"vnuUB4X4tTpFh5CF","name":"DAEDamageInferno","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/svg/dice-target.svg","scope":"global","command":"// DAEDamage dice type\n\nconst lastArg = args[args.length-1];\nlet atype = args[2]\nlet adamage = args[1].split('d');\nlet ttoken = DAE.DAEfromUuid(lastArg.tokenUuid); // better since it gets the token no matter what scene it is on\nlet casterItem = DAE.DAEfromUuid(lastArg.origin); // better since it gets the item on the synthetic actor\nlet aactor = casterItem.actor;\nif (aactor.uuid === lastArg.actorUuid) return; // don't trigger on the troll\nconsole.log(ttoken, args, \"ORGS\");\nlet damageInferno = ttoken.getFlag('world', 'dmginf') ?? 0;\nadamage[0] = parseInt(adamage[0]) + damageInferno;\nlet newdice = adamage.join('d');\n\nif (args[0] === \"on\") {\n    ttoken.setFlag('world', 'dmginf', adamage[0]);\n}\nif (args[0] === \"each\" || \"on\") {\n    let damageRoll = new Roll(newdice,{async:false}).roll();\n    new MidiQOL.DamageOnlyWorkflow(aactor,null,damageRoll.total,atype,[ttoken], damageRoll,{itemCardId: \"new\", itemData:casterItem.data});\n}\nif(args[0] === \"off\"){\n    ttoken.unsetFlag('world', 'dmginf');\n}","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":true},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}}}
{"_id":"w8MExLHMIGt1K4KO","name":"RollTable: Acerto Crítico","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Acerto Crítico","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_vd9wmfl2y6","path":"Roll Tables","color":"#008000"}},"scope":"global","command":"game.tables.getName(\"Acerto Crítico\").draw();","author":"X4uo406iXTm4HkVN","img":"icons/vtt-512.png","actorIds":[]}
{"name":"#[CF_tempEntity]","type":"chat","author":"7qbBJORkk2z0FBTX","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"cf":{"id":"temp_jhclp2bqm3","path":"Automação","color":"#000000","name":"Automação","children":["KLCMPcexJHA0PVi1","9iDHQ3eKA7Kh17Uv","kJGGa17ttZVJIsBk","ZBRzuX1iajd8ynKT"],"folderPath":[]}},"_id":"wSRZjEOwaJyUAL2o"}
{"name":"Looting","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/containers/bags/coinpouch-gold-red.webp","scope":"global","command":"(async () => {\nlet actions = new InnocentiLoot.Loot();\nawait actions.Check();\n})();","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.xF8VDI28j7UzkSoG"}},"_id":"wxkbisvQBXWtPgMU"}
{"name":"PoolFlags","type":"script","author":"7qbBJORkk2z0FBTX","img":"icons/svg/dice-target.svg","scope":"global","command":"//console.log(token.id);\n//console.log(args)\nlet pool = new Innocenti.PoolFlags(token.id, ...args);\nif(event == 'leave') pool.remove = true;\npool.AddPool();\npool.RemovePool();","folder":null,"sort":0,"permission":{"default":0,"7qbBJORkk2z0FBTX":3},"flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_mpw7hmp31od","path":"Automação Master","color":"#0080ff"},"core":{"sourceId":"Compendium.innocenti-actions.automation-macros.o8zxazJfUPDgD8Bl"}},"_id":"yJWOaVbW4tjGaRU6"}
