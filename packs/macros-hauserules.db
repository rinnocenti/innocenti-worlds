{"_id":"1a4y2if1AEOVTDTu","name":"Reoccuring Effect","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"exportSource":{"world":"testWorld","system":"dnd5e","coreVersion":"0.7.9","systemVersion":"1.2.4"},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// arguments\n//args[0] --> \"on\", \"each\", \"off\"\n//args[1] --> the level the spell was cast (usually @item.level)\n//args[2] --> save allowed (\"yes\"/\"no\"), e.g. damage effects that can only be ended using an action)\n//args[3] --> damage mode \n//              \"none\" for effects without damage\n//              \"flat\" for fixed damage from argument baseDamage\n//              \"scaling\" for damage scaling based on castLevel\n//args[4] --> damage type\n//args[5] --> baseDamage (e.g. 1d6)\n//args[6] --> scalingDieCount (e.g. 2 for 2dX scaling per spell level)\n//args[7] --> scalingDieSize (e.g. d6 for Xd6 scaling per spell level)\n//args[8] --> saveType (if spell does not contain a saving throw, e.g. Paladin smites)\n//args[9] --> flat DC\n\nif (args[0] === \"each\") {\n\n  const lastArg = args[args.length-1];\n  const castLevel = args[1];\n  const saveAllowed = args[2];\n  const damageMode = args[3];\n  const damageType = args[4];\n  const baseDamage = args[5];\n  const scalingDieCount = args[6];\n  const scalingDieSize = args[7];\n  let saveType = args[8];\n  let dc = args[9];\n\n  let target;\n  if (lastArg.tokenId) target = canvas.tokens.get(lastArg.tokenId);\n    else target = game.actors.get(lastArg.actorId).getActiveTokens(0);\n  const effect = lastArg.effectId;\n  const casterItem = lastArg.efData.flags.dae.itemData;\n  const casterItemLevel = casterItem.data.level;\n  const [_1, casterId, _2, _3] = lastArg.efData.origin.split(\".\")\n  const caster = game.actors.get(casterId);\n  const casterT = caster.isToken ? caster.token : caster.getActiveTokens[0];\n\n  let effectEnds;\n  \n  //Determine saveType and dc if save is allowed and ask for save\n  //Priority for save: 1) values in args[8] and args[9]\n  //          2) values stored in the item\n  if (saveAllowed === \"yes\") {\n      if (saveType === null) {\nChatMessage.create({ content: \"Hallo\" });   \n        saveType = casterItem.data.save.ability;\n        dc = casterItem.data.save.dc;\n      }\n      const flavor = `${CONFIG.DND5E.abilities[saveType]} DC${dc} ${casterItem.name}`;  \n      let save = (await target.actor.rollAbilitySave(saveType, {flavor, fastforward: true, chatMessage: true}));\n      if (save.total >= dc) effectEnds = true;\n        else effectEnds = false;\n  } else effectEnds = false;\n\n\n  //Delete effect if saved; otherwise do damage, if effect has damage over time\n  if (effectEnds) {\n    if (target) target.actor.deleteEmbeddedEntity(\"ActiveEffect\", effect);\n  } else {\n    let damageRoll;\n    if (damageMode != \"none\") {\n      let damageFormula;\n      if (damageMode === \"scaling\" && castLevel-casterItemLevel > 0) {\n        damageFormula = baseDamage + \"+\" + (castLevel-casterItemLevel) * scalingDieCount + scalingDieSize;\n      } else {\n        damageFormula = baseDamage;\n      }\n      damageRoll = new Roll(damageFormula).roll();\n      new MidiQOL.DamageOnlyWorkflow(caster, casterT, damageRoll.total, damageType, [target], damageRoll, {flavor: `Damage for ${casterItem.name}`, itemCardId: \"new\", itemData: casterItem})\n    }\n  }\n}","author":"iv1xD7Xolui8SRLL","img":"systems/dnd5e/icons/skills/affliction_02.jpg","actorIds":[]}
{"_id":"3bjaEBbzCkYrPKgM","name":"DAESelfRepeat","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// usado apra marcar qual inimigo vai repetir o ataque\n// SelfRepeat Engulf end\n\nconst lastArg = args[args.length-1];\nlet effectId = lastArg.effectId;\nlet macroRepeat = (args[2] && args[2] != lastArg)? 'endEveryTurn':'startEveryTurn';\n\nconsole.log(\"Self Repeat args are \", ...args);\nlet tgtoken;\nlet tgactor;\nif (lastArg.tokenId){\n    tgtoken = canvas.tokens.get(lastArg.tokenId);\n    tgactor = tgtoken.actor;\n} \nelse tgactor = game.actors.get(lastArg.actorId);\n\nlet org = lastArg.origin.split('.');\nlet orgItem = lastArg.efData.flags.dae.itemData;\nlet aCondition = orgItem.data.activation.condition;\nlet conditions = (aCondition)? aCondition.split(',') : false;\nlet item = (typeof args[1] === 'string')? _token.actor.items.find(i => i.name == args[1]) : _token.actor.items.find(i => i.id === args[1]._id);\n\nlet REPEAT_EFFECT = {\n    label: `Repeat_${tgtoken.name}`,\n    icon: item.img,\n    changes: [\n      {key: \"macro.execute\", \n      value: `DAEAttack ${_token.id} ${lastArg.tokenId} ${item.name}`, \n      mode: ACTIVE_EFFECT_MODES.CUSTOM\n      }\n    ],\n    flags: {\n        dae: {\n            macroRepeat: macroRepeat,\n            //specialDuration: [\"turnStart\"]\n        }\n    },\n    transfer: true,\n  };\n  if(args[0] === 'on'){\n    let activeConditions = await _token.actor.getEmbeddedCollection(\"ActiveEffect\")\n    .find(a=> a.label === `Repeat_${tgtoken.name}`);\n    if(!activeConditions){\n        let upItem = Object.assign(REPEAT_EFFECT, {_id: item._id});\n        await _token.actor.createEmbeddedEntity(\"ActiveEffect\", [REPEAT_EFFECT]);  \n    }\n  }","author":"X4uo406iXTm4HkVN","img":"assets/icons/icones-flat/Icon.2_72.png","actorIds":[]}
{"_id":"7YOh9VI23mY4eXmO","name":"#[CF_tempEntity]","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"chat","flags":{"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000","name":"DAE","children":["nEl7iFhyJaHR8JvV","Xjd9FfJLJqZqJr73","LadveiqOuZ8alEYp","cDRwSy2yGKb80zxO","w2bLSRS0326v45pk","d2OuKcbeO0o53zhJ","vJNB3G0cC8LVBbgx","oazlmnKwPTeCsAKG","7e1Ggusc7R5eYK0X","VEmKbV6xSPl4v3jY","EHSkswVF9UCAI0lz","KiW0QWxf5jiWiti2","PdsiGpwvloC0e0T3","9HN1BvNhBWTFJFPs","Iui3JBZDFxS3J1Q4","obJPeJAHH8o7L5Zl","1a4y2if1AEOVTDTu","CMwhsma1DZ4uB17Z","llJdt3as1TcTGe1S","3bjaEBbzCkYrPKgM","EUnnHrdw7VpKAWig","88zcUA01VHHD8DJC"],"folderPath":[]}},"scope":"global","command":"","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"7e1Ggusc7R5eYK0X","name":"DAERepeat","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"//DAERepeat @token @target itemName\nif(args[0] === 'each'){\n    console.log(\"EACH\", args);\n    let atoken = canvas.tokens.get(args[1]);\n    let atarget = canvas.tokens.get(args[2]);\n    let saveTargets = game.user.targets;\n    let damageItem = atoken.actor.items.getName(args[3]);\n    let aCondition = damageItem.data.data.activation.condition;\n    \n    if(aCondition && game.cub.hasCondition(aCondition, atarget)){\n        await atoken.actor.deleteEmbeddedEntity(\"ActiveEffect\", effectId);\n        return;\n    }\n    game.user.targets = new Set([atarget]);\n    try {\n        damageItem.roll();\n    } finally {\n        game.user.targets = saveTargets;\n    }\n}","author":"X4uo406iXTm4HkVN","img":"assets/icons/icones-flat/Icon.4_03.png","actorIds":[]}
{"_id":"88zcUA01VHHD8DJC","name":"DAEGrappler","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// Grapple true\nconst lastArg = args[args.length-1];\nlet DAEConditions = game.macros.getName(\"DAEConditions\");\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nlet org = lastArg.origin.split('.');\nlet aactor = game.actors.get(org[1]);\nlet skill = (tactor.data.data.skills.ath.total >= tactor.data.data.skills.acr.total) ? 'ath' : 'acr';\nlet item = lastArg.efData.flags.dae.itemData;\nconst DC = (lastArg == args[1]) ? false : parseInt(item.data.save.dc);\n\nlet flavor = '';\nlet aCondition = item.data.activation.condition;\nlet conditions = (aCondition) ? aCondition.split(';'):false;\nlet rm = await DAEConditions.execute(conditions, tactor);\nif (args[0] === \"on\") {\n    console.log(conditions, rm, conditions.length);\n    if((conditions && rm == conditions.length) || conditions == false){\n        if(token.id != lastArg.tokenId && lastArg == args[1]){\n            await aactor.rollSkill('ath').then(async (result) => {\n                let res = await tactor.rollSkill(skill, {flavor, fastforward: true});\n                if(result.total <= res.total){\n                    await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n                }else{\n                    let aef = tactor.getEmbeddedCollection(\"ActiveEffect\").find(a=>a.label == \"Grapple\");\n                    await tactor.deleteEmbeddedEntity(\"ActiveEffect\", aef._id);\n                }\n            });\n        }\n    }else{\n        await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n    }\n} else if (args[0] === \"each\") {\n    if(game.cub.hasCondition(\"Restrained\", tactor) && lastArg == args[1]){\n        await aactor.rollSkill('ath').then(async (result) => {\n            let res = await tactor.rollSkill(skill, {flavor, fastforward: true});\n            if(result.total <= res.total){\n                await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n            }\n        });\n    }else if(game.cub.hasCondition(\"Restrained\", tactor) && DC != false){\n        await tactor.rollSkill(skill, {flavor, fastforward: true}).then(async (result) => {\n            if(result.total >= DC){\n                await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n            }\n        })\n         \n    }\n} else if (args[0] === \"off\") {\n// do any clean up\n}","author":"X4uo406iXTm4HkVN","img":"modules/combat-utility-belt/icons/grappled.svg","actorIds":[]}
{"_id":"9HN1BvNhBWTFJFPs","name":"DAERollTable","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"//DAERollTable Tablename\nif(args[0] === \"each\"){\n    game.tables.getName(args[1]).draw();\n}","author":"X4uo406iXTm4HkVN","img":"icons/svg/d20.svg","actorIds":[]}
{"_id":"CMwhsma1DZ4uB17Z","name":"RepeatDamage","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"//RepeatDamage @token @target @item | NameItem [itemToken]\nif(args[1] == null){\n    let atarget=[];\n    //Magia veio de uma Aura\n    let org = args[args.length -1].origin.split('.');\n    let aactor = game.actors.get(org[1]);\n    if(canvas.tokens.get(args[args.length -1].tokenId).actor.id == aactor.id){\n        canvas.tokens.placeables.map(entity=>{\n            if(entity.actor.id != aactor.id){\n                entity.actor.effects.map(ef=>{\n                    if(ef.data.origin == args[args.length -1].origin && ef.data.label == args[args.length -1].efData.label){\n                        atarget.push(entity)\n                        console.log(\"Alvo é : \", entity.name, ef.data.label);\n                    }\n                });\n            }\n        });\n        let saveTargets = game.user.targets;\n        game.user.targets = new Set(atarget);\n        try {\n            let damageItem = aactor.items.get(org[3]);\n            damageItem.roll();\n        } finally {\n            game.user.targets = saveTargets;\n        }\n    }\n}else{\n    if(args[0] === 'each'){\n        let atoken = canvas.tokens.get(args[1]);\n        let atarget = canvas.tokens.get(args[2]);\n        let damageItem = (args[3].id) ? atoken.actor.items.get(args[3]._id) : atoken.actor.items.getName(args[3]);\n        let saveTargets = game.user.targets;\n        game.user.targets = new Set([atarget]);\n        try {\n           await damageItem.roll();\n           if(args[4]){\n               game.user.targets = new Set([atoken]);\n           }\n        } finally {\n            game.user.targets = saveTargets;\n        }\n    }\n    //console.log(args)\n}","author":"X4uo406iXTm4HkVN","img":"assets/icons/icones-flat/Icon.4_03.png","actorIds":[]}
{"_id":"EUnnHrdw7VpKAWig","name":"DAEConditions","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// args[0] = conditions\n//args[1] = tactor;\nlet rm = 0;\nlet verif;\nlet sTypes;\n    if(args[0] != false){\n        for (let c of args[0]){\n            let cond = c.split(':');\n            cond[0] = cond[0].trim();\n            switch (cond[0]) {\n                case 'Condition':\n                    if(game.cub.hasCondition(cond[1].trim(), args[1])) rm ++;\n                    break;\n                case 'Size':\n                    sTypes = cond[1].trim().split(',');\n                    if(sTypes.includes(args[1].data.data.traits.size)) rm++;\n                    break;\n                case 'Alignment':\n                    verif = args[1].data.data.details.alignment.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                case 'Type':\n                    verif = args[1].data.data.details.type.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                default:\n            }\n        }\n    }\n    return rm;","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"Iui3JBZDFxS3J1Q4","name":"DAEAttackEnd","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// DAEAttackEnd @item|itemName\nif(args){\nconst lastArg = args[args.length-1];\nconsole.log(\"ARGS\",args);\n\nlet ttoken =  canvas.tokens.get(lastArg.tokenId);\nlet tactor = ttoken.actor;\n\nlet org = (lastArg.origin != undefined) ? lastArg.origin.split('.') : args[1];\n\nconsole.log(ttoken.name);\n\nlet item= tactor.items.getName(args[1]);\n\nconsole.log(\"DAMAGE\",item);\nlet aCondition = item.data.data.activation.condition;\nlet conditions = (aCondition) ? aCondition.split(';'):false;\nconsole.log(\"Conditions\",conditions, aCondition);\n\nlet rm = 0;\n    let verif;\n    let sTypes;\n    if(conditions != false){\n        for (let c of conditions){\n            let cond = c.split(':');\n            cond[0] = cond[0].trim();\n            switch (cond[0]) {\n                case 'Condition':\n                    if(game.cub.hasCondition(cond[1].trim(), tactor)) rm ++;\n                    break;\n                case 'Size':\n                    sTypes = cond[1].trim().split(',');\n                    if(sTypes.includes(tactor.data.data.traits.size)) rm++;\n                    break;\n                case 'Alignment':\n                    verif = tactor.data.data.details.alignment.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                case 'Type':\n                    verif = tactor.data.data.details.type.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                default:\n            }\n        }\n        console.log(\"RM\", rm, conditions.length);\n    }\n\nif(args[0] == \"off\"){\n    if((conditions && rm == conditions.length) || conditions == false){\n         new MidiQOL.DamageOnlyWorkflow(actor, token, damageRoll.total, dtype, [token], damageRoll, {flavor: `Failed Save for ${item.name} - damage type ${dtype}`, item});\n    }\n}\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/violet_20.jpg","actorIds":[]}
{"_id":"KiW0QWxf5jiWiti2","name":"SelfRepeat","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// usado apra marcar qual inimigo vai repetir o ataque\n// SelfRepeat Engulf end\n\nconst lastArg = args[args.length-1];\nlet effectId = lastArg.effectId;\nlet macroRepeat = (args[2] && args[2] != lastArg)? 'endEveryTurn':'startEveryTurn';\n\nconsole.log(\"Self Repeat args are \", ...args);\nlet atoken;\nlet tactor;\nif (lastArg.tokenId){\n    atoken = canvas.tokens.get(lastArg.tokenId);\n    tactor = atoken.actor;\n} \nelse tactor = game.actors.get(lastArg.actorId);\nlet orgItem = lastArg.efData.flags.dae.itemData;\nlet org = lastArg.origin.split('.');\nlet aactor = game.actors.get(org[1]);\nlet aCondition = orgItem.data.activation.condition;\nlet conditions = (aCondition)? aCondition.split(',') : false;\nlet item = aactor.items.find(i => i.name === args[1]);\n\nconsole.log(item);\n//////////\nlet REPEAT_EFFECT = {\n    label: `Repeat_${atoken.name}`,\n    icon: item.img,\n    changes: [\n      {key: \"macro.execute\", \n      value: `DAEAttack ${_token.id} ${lastArg.tokenId} ${item.name}`, \n      mode: ACTIVE_EFFECT_MODES.CUSTOM\n      }\n    ],\n    flags: {\n        dae: {\n            macroRepeat: macroRepeat,\n            //specialDuration: [\"turnStart\"]\n        }\n    },\n    transfer: true,\n  };\n  console.log(REPEAT_EFFECT)\nif(args[0] === 'on'){\n    let activeConditions = await atoken.getEmbeddedCollection(\"ActiveEffect\")\n    .find(a=> a.label === `Repeat_${atoken.name}`);\n    if(!activeConditions){\n        let upItem = Object.assign(REPEAT_EFFECT, {_id: item._id});\n        await _token.actor.createEmbeddedEntity(\"ActiveEffect\", [REPEAT_EFFECT]);  \n    }\n    \n}\n\n/*\nlet atoken = canvas.tokens.get(args[1]);\nlet atarget = canvas.tokens.get(args[2]);\nlet lastArg = args[args.length-1];\nlet effectId = lastArg.effectId;\nlet macroRepeat = (args[4] && args[4] != lastArg)? 'endEveryTurn':'startEveryTurn';\n\nlet REPEAT_EFFECT = {\n    label: `Repeat_${atarget.name}`,\n    icon: \"assets/icons/icones-flat/Icon.4_03.png\",\n    changes: [\n      {key: \"macro.execute\", \n      value: `DAERepeat ${args[1]} ${args[2]} ${args[3]}`, \n      mode: ACTIVE_EFFECT_MODES.CUSTOM\n      }\n    ],\n    flags: {\n        dae: {\n            macroRepeat: macroRepeat,\n            //specialDuration: [\"turnStart\"]\n        }\n    },\n    transfer: true,\n  };\nlet item = (typeof args[3] === 'string') ? atoken.actor.items.find(i => i.name === args[3]) : atoken.actor.items.find(i => i.id === args[3]._id);\nlet aCondition = item.data.data.activation.condition;\nif(args[0] === 'on'){\n    \n    if(aCondition && game.cub.hasCondition(aCondition, atarget)){\n        await atoken.actor.deleteEmbeddedEntity(\"ActiveEffect\", effectId);\n    }else{\n        let upItem = Object.assign(REPEAT_EFFECT, {_id: item._id});\n        await atoken.actor.createEmbeddedEntity(\"ActiveEffect\", [REPEAT_EFFECT]);\n    }\n}\n\nif(args[0] === 'off')\n*/","author":"X4uo406iXTm4HkVN","img":"assets/icons/icones-flat/Icon.2_72.png","actorIds":[]}
{"_id":"LadveiqOuZ8alEYp","name":"DAEDamage","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"let adamage = args[1];\nlet atype = args[2];\nlet atoken = canvas.tokens.get(args[3]);\nlet atarget = canvas.tokens.get(args[4]);\nlet lastArg = args[args.length-1];\nlet casterItem = lastArg.efData.flags.dae.itemData;\n\nconsole.log(atoken, atarget);\n//let aactor = game.actors.get(atoken.actor.id)\n\nif (args[0] === \"each\") {\n    let damageRoll = new Roll(adamage).roll();\n    new MidiQOL.DamageOnlyWorkflow(atoken.actor, atoken, damageRoll.total, atype, [atarget], damageRoll,{flavor: `Damage type - (${atype})`, itemCardId: \"new\", itemData: casterItem})\n    \n}","author":"X4uo406iXTm4HkVN","img":"assets/icons/icones-flat/Icon.4_85.png","actorIds":[]}
{"_id":"PdsiGpwvloC0e0T3","name":"DAEAura","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// DAEAura @token @item self\nconsole.log(args);\nlet atoken = canvas.tokens.get(args[1]);\nlet lastArg = args[args.length-1];\nlet effectId = lastArg.effectId;\nlet atarget=[];\nlet self = (args[3]!== lastArg && args[3] == 'self') ? true : false;\nif(args[0] === 'on' || args[0] === 'each'){\n    if(self && atoken.actor.id != lastArg.actorId) return;\n    canvas.tokens.placeables.map(entity=>{\n        entity.actor.effects.map(ef=>{\n            if(ef.data.origin == lastArg.origin && ef.data.label == lastArg.efData.label){\n                if(entity.actor.id == lastArg.actorId && self){\n                    atarget.push(entity);\n                }else if(entity.actor.id != lastArg.actorId){\n                    atarget.push(entity);\n                }\n            }\n        });\n    });\n    console.log(atoken, atarget);\n    let saveTargets = game.user.targets;\n        game.user.targets = new Set(atarget);\n        try {\n            let damageItem = (typeof args[2] === 'string') ? atoken.actor.items.find(i => i.name === args[2]) : atoken.actor.items.find(i => i.id === args[2]._id);\n            console.log(damageItem);\n            damageItem.roll();\n        } finally {\n            game.user.targets = saveTargets;\n        }\n    \n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/spells/wind-grasp-magenta-2.jpg","actorIds":[]}
{"_id":"VEmKbV6xSPl4v3jY","name":"DAEAttack","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// DAEAttack @item|itemName\n// DAEAttack @token @target @item|itemname\n//console.log(\"ON ATACK\", args);\nconst lastArg = args[args.length-1];\nlet DAEConditions = game.macros.getName(\"DAEConditions\");\nconsole.log(\"ARGS\",args);\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nif (args.length > 3) tactor = canvas.tokens.get(args[2]).actor;\n\nlet org = (lastArg.origin != undefined)?lastArg.origin.split('.'):args[1];\nlet atoken = (args.length > 3) ? canvas.tokens.get(args[1]) : _token;\n\nlet item;\n\nlet origitem = lastArg.efData.flags.dae.itemData;\nif(args.length < 3) item = atoken.actor.items.find(i => i.id === origitem._id);\nif(args.length == 3) item = (typeof args[1] === 'string') ? atoken.actor.items.find(i => i.name === args[1]) : atoken.actor.items.find(i => i.id === args[1]._id);\nif(args.length > 3) item = (typeof args[3] === 'string') ? atoken.actor.items.find(i => i.name === args[3]) : atoken.actor.items.find(i => i.id === args[3]._id);\n\n\nconsole.log(\"DAMAGE\",item, origitem);\nlet aCondition = (origitem)?origitem.data.activation.condition: item.data.data.activation.condition;\nlet conditions = (aCondition) ? aCondition.split(';'):false;\nconsole.log(\"Conditions\",conditions, aCondition);\n\nlet rm = await DAEConditions.execute(conditions, tactor);\n/*\n    let verif;\n    let sTypes;\n    if(conditions != false){\n        for (let c of conditions){\n            let cond = c.split(':');\n            cond[0] = cond[0].trim();\n            switch (cond[0]) {\n                case 'Condition':\n                    if(game.cub.hasCondition(cond[1].trim(), tactor)) rm ++;\n                    break;\n                case 'Size':\n                    sTypes = cond[1].trim().split(',');\n                    if(sTypes.includes(tactor.data.data.traits.size)) rm++;\n                    break;\n                case 'Alignment':\n                    verif = tactor.data.data.details.alignment.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                case 'Type':\n                    verif = tactor.data.data.details.type.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                default:\n            }\n        }\n        console.log(\"RM\", rm, conditions.length);\n    }\n*/\nif(args[0] == \"on\"){\n    if((conditions && rm == conditions.length) || conditions == false){\n        item.roll();\n    }\n}else if(args[0] == \"each\"){\n    if((conditions && rm == conditions.length) || conditions == false){\n        item.roll();\n    }else{\n        await atoken.actor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n    }\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/weapon_23.jpg","actorIds":[]}
{"_id":"Xjd9FfJLJqZqJr73","name":"DAE VampBite","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"//console.log(args);\nlet adamage = args[1];\nlet atarget = canvas.tokens.get(args[2]);\nlet itarget = canvas.tokens.get(args[3]);\n\nif (args[0] === \"on\") {\n    let max = atarget.actor.data.data.attributes.hp.max - (adamage);\n    ler recover = itarget.actor.data.data.attributes.hp.value + (adamage);\n    atarget.actor.update ({\n        \"data.attributes.hp.max\": max\n    });\n    itarget.actor.update ({\n        \"data.attributes.hp.value\": recover\n    });\n}\nif (args[0] === \"off\") {\n    let max = atarget.actor.data.data.attributes.hp.max + (adamage);\n    atarget.actor.update ({\n        \"data.attributes.hp.max\": max\n    });\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/red_29.jpg","actorIds":[]}
{"_id":"cDRwSy2yGKb80zxO","name":"Invisibility","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target\n\nlet target = canvas.tokens.get(args[1])\nif (args[0] === \"on\") {\n    ChatMessage.create({ content: `${target.name} turns invisible` });\n    target.update({ \"hidden\": true });\n}\nif (args[0] === \"off\") {\n    ChatMessage.create({ content: `${target.name} re-appears` });\n    target.update({ \"hidden\": false });\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/spells/fog-sky-2.jpg","actorIds":[]}
{"_id":"llJdt3as1TcTGe1S","name":"Until Save","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// Two versions one that fetches damage/save/dc from item and one that use args like \n// macro.execute CUSTOM \"Until Save\" cha 15 \n// Get some useful info.\n// active conition (requer uma condição especifica apra o efeito funcionar)\n\nconst lastArg = args[args.length-1];\nconsole.log(\"Until Save args are \", ...args);\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nelse tactor = game.actors.get(lastArg.actorId);\nlet item = lastArg.efData.flags.dae.itemData;\nlet aCondition = item.data.activation.condition;\nlet conditions = (aCondition)? aCondition.split(','):false;\n\nconsole.log(conditions)\n\nif (args[0] === \"on\") {\n    // Do any setup/first application as required.\n    let rm = 0;\n    let verif\n    if(conditions != false){\n        for (let c of conditions){\n            let cond = c.split(':');\n            cond[0] = cond[0].trim();\n            switch (cond[0]) {\n                case 'Condition':\n                    if(game.cub.hasCondition(cond[1].trim(), tactor)) rm ++;\n                    break;\n                case 'Size':\n                    if(tactor.data.data.traits.size == cond[1].trim()) rm++;\n                    break;\n                case 'Alignment':\n                    verif = tactor.data.data.details.alignment.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                case 'Type':\n                    verif = tactor.data.data.details.type.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                default:\n            }\n        }\n        if(rm != conditions.length){\n            await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n        }\n    }\n} else if (args[0] === \"each\") {\n  const saveType = (args[1] && args[1] != lastArg)? args[1]: item.data.save.ability;\n  const DC = (args[2] && args[2] != lastArg)? args[2]: item.data.save.dc;\n  const flavor = `${CONFIG.DND5E.abilities[saveType]} DC${DC} ${item?.name || \"\"}`;\n  let save = (await tactor.rollAbilitySave(saveType, {flavor, fastforward: true})).total; \n  if (save > DC) {\n    if (tactor) tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId); \n    // remove the effect, this macro will be called again with \"off\" when the effect has been deleted.\n  }else if(item.data.formula){\n      let dd = item.data.formula.split('[');\n      let dtype =(dd.length > 1) ? dd[1].slice(0, -1):item.data.damage.parts[0][1];\n      console.log(dd, dtype)\n        let damageRoll = new Roll(dd[0]).roll(); // could be passed as an argument\n        new MidiQOL.DamageOnlyWorkflow(actor, token, damageRoll.total, dtype, [token], damageRoll, {flavor: `Failed Save for ${item.name} - damage type ${dtype}`, item})\n\n  }\n} else if (args[0] === \"off\") {\n// do any clean up\n}","author":"X4uo406iXTm4HkVN","img":"assets/icons/icones-flat/Icon.4_03.png","actorIds":[]}
{"_id":"nEl7iFhyJaHR8JvV","name":"DAE Life Drain","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"const lastArg = args[args.length-1];\nlet adamage = args[1];\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n\n\nif (args[0] === \"on\") {\n    let max = tactor.data.data.attributes.hp.max - (adamage);\n    tactor.update ({\n        \"data.attributes.hp.max\": max\n    });\n}\nif (args[0] === \"off\") {\n    let max = tactor.data.data.attributes.hp.max + (adamage);\n    tactor.update ({\n        \"data.attributes.hp.max\": max\n    });\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/violet_28.jpg","actorIds":[]}
{"_id":"oazlmnKwPTeCsAKG","name":"DAECenterToken","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"//@token\nconsole.log(\"CENTER\",args)\nconst lastArg = args[args.length-1];\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId);\nlet atoken = canvas.tokens.get(args[1])\n\nif(args[0] === 'on'){\n    tactor.update({x: atoken.center.x, y: atoken.center.y});\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/yellow_34.jpg","actorIds":[]}
{"_id":"obJPeJAHH8o7L5Zl","name":"DAEGrapple","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// Grapple true\nconst lastArg = args[args.length-1];\nlet DAEConditions = game.macros.getName(\"DAEConditions\");\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nlet org = lastArg.origin.split('.');\nlet aactor = game.actors.get(org[1]);\nlet skill = (tactor.data.data.skills.ath.total >= tactor.data.data.skills.acr.total) ? 'ath' : 'acr';\nlet item = lastArg.efData.flags.dae.itemData;\nconst DC = (lastArg == args[1]) ? false : parseInt(item.data.save.dc);\n\nlet flavor = '';\nlet aCondition = item.data.activation.condition;\nlet conditions = (aCondition) ? aCondition.split(';'):false;\nlet rm = await DAEConditions.execute(conditions, tactor);\nif (args[0] === \"on\") {\n    if((conditions && rm == conditions.length) || conditions == false){\n        if(token.id != lastArg.tokenId && lastArg == args[1]){\n            await aactor.rollSkill('ath').then(async (result) => {\n                let res = await tactor.rollSkill(skill, {flavor, fastforward: true});\n                if(result.total <= res.total){\n                    await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n                }\n            });\n        }\n    }else{\n        await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n    }\n} else if (args[0] === \"each\") {\n    if(game.cub.hasCondition(\"Grappled\", tactor) && lastArg == args[1]){\n        await aactor.rollSkill('ath').then(async (result) => {\n            let res = await tactor.rollSkill(skill, {flavor, fastforward: true});\n            if(result.total <= res.total){\n                await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n            }\n        });\n    }else if(game.cub.hasCondition(\"Grappled\", tactor) && DC != false){\n        await tactor.rollSkill(skill, {flavor, fastforward: true}).then(async (result) => {\n            if(result.total >= DC){\n                await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n            }\n        })\n         \n    }\n} else if (args[0] === \"off\") {\n// do any clean up\n}","author":"X4uo406iXTm4HkVN","img":"modules/combat-utility-belt/icons/grappled.svg","actorIds":[]}
{"_id":"vJNB3G0cC8LVBbgx","name":"RepeatTest","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"//console.log(\"ENTRA\", args);\n// \"RepeatTest\" str dc condition @token @target\nlet ttoken = canvas.tokens.get(args[4]);\nlet atargets = canvas.tokens.get(args[5]);\nlet tactor = atargets.actor;\nlet dc = args[2];\nlet skill = args[1];\nlet cond = args[3];\nlet lastArg = args[args.length-1];\nlet effectId = lastArg.effectId;\nif (args[0] === \"each\") {\n    if (Object.entries(game.dnd5e.config.skills).map(a => a[0]).includes(skill)){\n        tactor.rollSkill(skill).then((result) => {\n            if (result.total >= dc) {\n                atargets.actor.deleteEmbeddedEntity(\"ActiveEffect\", effectId);\n            }\n        });\n    }else if (Object.entries(game.dnd5e.config.abilities).map(a => a[0]).includes(skill)){\n        tactor.rollAbilityTest(skill).then((result) => {\n            if (result.total >= dc) {\n                atargets.actor.deleteEmbeddedEntity(\"ActiveEffect\", effectId);\n            }\n        });\n    }\n    \n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/blue_01.jpg","actorIds":[]}
{"_id":"w2bLSRS0326v45pk","name":"EnlargeReduce","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.tKKbvoCkf5A37rsc"},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target \n\n/**\n * For each target, the GM will have to choose \n */\nlet target = canvas.tokens.get(args[1]);\nlet originalSize = target.data.width;\nlet mwak = target.actor.data.data.bonuses.mwak.damage;\n\nif (args[0] === \"on\") {\n    new Dialog({\n        title: \"Enlarge or Reduce\",\n        buttons: {\n            one: {\n                label: \"Enlarge\",\n                callback: () => {\n                    let bonus = mwak + \" 1d4\";\n                    let enlarge = (originalSize + 1);\n                    target.actor.update({ \"data.bonuses.mwak.damage\": bonus });\n                    target.update({ \"width\": enlarge, \"height\": enlarge });\n                    target.actor.setFlag('world', 'enlageReduceSpell', {\n                        size: originalSize,\n                        ogMwak: mwak,\n                    });\n                    ChatMessage.create({ content: target.name + \" is enlarged\" });\n                }\n            },\n            two: {\n                label: \"Reduce\",\n                callback: () => {\n                    let bonus = mwak + \" -1d4\";\n                    let size = originalSize;\n                    let newSize = (size > 1) ? (size - 1) : (size - 0.3);\n                    target.actor.update({ \"data.bonuses.mwak.damage\": bonus });\n                    target.update({ \"width\": newSize, \"height\": newSize });\n                    target.actor.setFlag('world', 'enlageReduceSpell', {\n                        size: originalSize,\n                        ogMwak: mwak,\n                    });\n                    ChatMessage.create({ content: target.name + \" is reduced\" });\n                }\n            },\n        }\n    }).render(true);\n}\nif (args[0] === \"off\") {\n    let flag = target.actor.getFlag('world', 'enlageReduceSpell');\n    target.actor.update({ \"data.bonuses.mwak.damage\": flag.ogMwak });\n    target.update({ \"width\": flag.size, \"height\": flag.size });\n    target.actor.unsetFlag('world', 'enlageReduceSpell');\n    ChatMessage.create({ content: target.name + \" is returned to normal size\" });\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/spells/link-blue-2.jpg","actorIds":[]}
{"_id":"nEl7iFhyJaHR8JvV","name":"DAE Life Drain","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"const lastArg = args[args.length-1];\nlet adamage = args[1];\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\n\n\nif (args[0] === \"on\") {\n    let max = tactor.data.data.attributes.hp.max - (adamage);\n    tactor.update ({\n        \"data.attributes.hp.max\": max\n    });\n}\nif (args[0] === \"off\") {\n    let max = tactor.data.data.attributes.hp.max + (adamage);\n    tactor.update ({\n        \"data.attributes.hp.max\": max\n    });\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/violet_28.jpg","actorIds":[]}
{"_id":"Xjd9FfJLJqZqJr73","name":"DAE VampBite","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"//console.log(args);\nlet adamage = args[1];\nlet atarget = canvas.tokens.get(args[2]);\nlet itarget = canvas.tokens.get(args[3]);\n\nif (args[0] === \"on\") {\n    let max = atarget.actor.data.data.attributes.hp.max - (adamage);\n    ler recover = itarget.actor.data.data.attributes.hp.value + (adamage);\n    atarget.actor.update ({\n        \"data.attributes.hp.max\": max\n    });\n    itarget.actor.update ({\n        \"data.attributes.hp.value\": recover\n    });\n}\nif (args[0] === \"off\") {\n    let max = atarget.actor.data.data.attributes.hp.max + (adamage);\n    atarget.actor.update ({\n        \"data.attributes.hp.max\": max\n    });\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/red_29.jpg","actorIds":[]}
{"_id":"VEmKbV6xSPl4v3jY","name":"DAEAttack","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// DAEAttack @item|itemName\n// DAEAttack @token @target @item|itemname\n//console.log(\"ON ATACK\", args);\nconst lastArg = args[args.length-1];\nlet DAEConditions = game.macros.getName(\"DAEConditions\");\nconsole.log(\"ARGS\",args);\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nif (args.length > 3) tactor = canvas.tokens.get(args[2]).actor;\n\nlet org = (lastArg.origin != undefined)?lastArg.origin.split('.'):args[1];\nlet atoken = (args.length > 3) ? canvas.tokens.get(args[1]) : _token;\n\nlet item;\n\nlet origitem = lastArg.efData.flags.dae.itemData;\nif(args.length < 3) item = atoken.actor.items.find(i => i.id === origitem._id);\nif(args.length == 3) item = (typeof args[1] === 'string') ? atoken.actor.items.find(i => i.name === args[1]) : atoken.actor.items.find(i => i.id === args[1]._id);\nif(args.length > 3) item = (typeof args[3] === 'string') ? atoken.actor.items.find(i => i.name === args[3]) : atoken.actor.items.find(i => i.id === args[3]._id);\n\n\nconsole.log(\"DAMAGE\",item, origitem);\nlet aCondition = (origitem)?origitem.data.activation.condition: item.data.data.activation.condition;\nlet conditions = (aCondition) ? aCondition.split(';'):false;\nconsole.log(\"Conditions\",conditions, aCondition);\n\nlet rm = await DAEConditions.execute(conditions, tactor);\n/*\n    let verif;\n    let sTypes;\n    if(conditions != false){\n        for (let c of conditions){\n            let cond = c.split(':');\n            cond[0] = cond[0].trim();\n            switch (cond[0]) {\n                case 'Condition':\n                    if(game.cub.hasCondition(cond[1].trim(), tactor)) rm ++;\n                    break;\n                case 'Size':\n                    sTypes = cond[1].trim().split(',');\n                    if(sTypes.includes(tactor.data.data.traits.size)) rm++;\n                    break;\n                case 'Alignment':\n                    verif = tactor.data.data.details.alignment.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                case 'Type':\n                    verif = tactor.data.data.details.type.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                default:\n            }\n        }\n        console.log(\"RM\", rm, conditions.length);\n    }\n*/\nif(args[0] == \"on\"){\n    if((conditions && rm == conditions.length) || conditions == false){\n        item.roll();\n    }\n}else if(args[0] == \"each\"){\n    if((conditions && rm == conditions.length) || conditions == false){\n        item.roll();\n    }else{\n        await atoken.actor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n    }\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/weapon_23.jpg","actorIds":[]}
{"_id":"Iui3JBZDFxS3J1Q4","name":"DAEAttackEnd","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// DAEAttackEnd @item|itemName\nif(args){\nconst lastArg = args[args.length-1];\nconsole.log(\"ARGS\",args);\n\nlet ttoken =  canvas.tokens.get(lastArg.tokenId);\nlet tactor = ttoken.actor;\n\nlet org = (lastArg.origin != undefined) ? lastArg.origin.split('.') : args[1];\n\nconsole.log(ttoken.name);\n\nlet item= tactor.items.getName(args[1]);\n\nconsole.log(\"DAMAGE\",item);\nlet aCondition = item.data.data.activation.condition;\nlet conditions = (aCondition) ? aCondition.split(';'):false;\nconsole.log(\"Conditions\",conditions, aCondition);\n\nlet rm = 0;\n    let verif;\n    let sTypes;\n    if(conditions != false){\n        for (let c of conditions){\n            let cond = c.split(':');\n            cond[0] = cond[0].trim();\n            switch (cond[0]) {\n                case 'Condition':\n                    if(game.cub.hasCondition(cond[1].trim(), tactor)) rm ++;\n                    break;\n                case 'Size':\n                    sTypes = cond[1].trim().split(',');\n                    if(sTypes.includes(tactor.data.data.traits.size)) rm++;\n                    break;\n                case 'Alignment':\n                    verif = tactor.data.data.details.alignment.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                case 'Type':\n                    verif = tactor.data.data.details.type.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                default:\n            }\n        }\n        console.log(\"RM\", rm, conditions.length);\n    }\n\nif(args[0] == \"off\"){\n    if((conditions && rm == conditions.length) || conditions == false){\n         new MidiQOL.DamageOnlyWorkflow(actor, token, damageRoll.total, dtype, [token], damageRoll, {flavor: `Failed Save for ${item.name} - damage type ${dtype}`, item});\n    }\n}\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/violet_20.jpg","actorIds":[]}
{"_id":"PdsiGpwvloC0e0T3","name":"DAEAura","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// DAEAura @token @item self\nconsole.log(args);\nlet atoken = canvas.tokens.get(args[1]);\nlet lastArg = args[args.length-1];\nlet effectId = lastArg.effectId;\nlet atarget=[];\nlet self = (args[3]!== lastArg && args[3] == 'self') ? true : false;\nif(args[0] === 'on' || args[0] === 'each'){\n    if(self && atoken.actor.id != lastArg.actorId) return;\n    canvas.tokens.placeables.map(entity=>{\n        entity.actor.effects.map(ef=>{\n            if(ef.data.origin == lastArg.origin && ef.data.label == lastArg.efData.label){\n                if(entity.actor.id == lastArg.actorId && self){\n                    atarget.push(entity);\n                }else if(entity.actor.id != lastArg.actorId){\n                    atarget.push(entity);\n                }\n            }\n        });\n    });\n    console.log(atoken, atarget);\n    let saveTargets = game.user.targets;\n        game.user.targets = new Set(atarget);\n        try {\n            let damageItem = (typeof args[2] === 'string') ? atoken.actor.items.find(i => i.name === args[2]) : atoken.actor.items.find(i => i.id === args[2]._id);\n            console.log(damageItem);\n            damageItem.roll();\n        } finally {\n            game.user.targets = saveTargets;\n        }\n    \n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/spells/wind-grasp-magenta-2.jpg","actorIds":[]}
{"_id":"oazlmnKwPTeCsAKG","name":"DAECenterToken","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"//@token\nconsole.log(\"CENTER\",args)\nconst lastArg = args[args.length-1];\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId);\nlet atoken = canvas.tokens.get(args[1])\n\nif(args[0] === 'on'){\n    tactor.update({x: atoken.center.x, y: atoken.center.y});\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/yellow_34.jpg","actorIds":[]}
{"_id":"EUnnHrdw7VpKAWig","name":"DAEConditions","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// args[0] = conditions\n//args[1] = tactor;\nlet rm = 0;\nlet verif;\nlet sTypes;\n    if(args[0] != false){\n        for (let c of args[0]){\n            let cond = c.split(':');\n            cond[0] = cond[0].trim();\n            switch (cond[0]) {\n                case 'Condition':\n                    if(game.cub.hasCondition(cond[1].trim(), args[1])) rm ++;\n                    break;\n                case 'Size':\n                    sTypes = cond[1].trim().split(',');\n                    if(sTypes.includes(args[1].data.data.traits.size)) rm++;\n                    break;\n                case 'Alignment':\n                    verif = args[1].data.data.details.alignment.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                case 'Type':\n                    verif = args[1].data.data.details.type.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                default:\n            }\n        }\n    }\n    return rm;","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"LadveiqOuZ8alEYp","name":"DAEDamage","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"let adamage = args[1];\nlet atype = args[2];\nlet atoken = canvas.tokens.get(args[3]);\nlet atarget = canvas.tokens.get(args[4]);\nlet lastArg = args[args.length-1];\nlet casterItem = lastArg.efData.flags.dae.itemData;\n\nconsole.log(atoken, atarget);\n//let aactor = game.actors.get(atoken.actor.id)\n\nif (args[0] === \"each\") {\n    let damageRoll = new Roll(adamage).roll();\n    new MidiQOL.DamageOnlyWorkflow(atoken.actor, atoken, damageRoll.total, atype, [atarget], damageRoll,{flavor: `Damage type - (${atype})`, itemCardId: \"new\", itemData: casterItem})\n    \n}","author":"X4uo406iXTm4HkVN","img":"assets/icons/icones-flat/Icon.4_85.png","actorIds":[]}
{"_id":"obJPeJAHH8o7L5Zl","name":"DAEGrapple","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// Grapple true\nconst lastArg = args[args.length-1];\nlet DAEConditions = game.macros.getName(\"DAEConditions\");\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nlet org = lastArg.origin.split('.');\nlet aactor = game.actors.get(org[1]);\nlet skill = (tactor.data.data.skills.ath.total >= tactor.data.data.skills.acr.total) ? 'ath' : 'acr';\nlet item = lastArg.efData.flags.dae.itemData;\nconst DC = (lastArg == args[1]) ? false : parseInt(item.data.save.dc);\n\nlet flavor = '';\nlet aCondition = item.data.activation.condition;\nlet conditions = (aCondition) ? aCondition.split(';'):false;\nlet rm = await DAEConditions.execute(conditions, tactor);\nif (args[0] === \"on\") {\n    if((conditions && rm == conditions.length) || conditions == false){\n        if(token.id != lastArg.tokenId && lastArg == args[1]){\n            await aactor.rollSkill('ath').then(async (result) => {\n                let res = await tactor.rollSkill(skill, {flavor, fastforward: true});\n                if(result.total <= res.total){\n                    await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n                }\n            });\n        }\n    }else{\n        await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n    }\n} else if (args[0] === \"each\") {\n    if(game.cub.hasCondition(\"Grappled\", tactor) && lastArg == args[1]){\n        await aactor.rollSkill('ath').then(async (result) => {\n            let res = await tactor.rollSkill(skill, {flavor, fastforward: true});\n            if(result.total <= res.total){\n                await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n            }\n        });\n    }else if(game.cub.hasCondition(\"Grappled\", tactor) && DC != false){\n        await tactor.rollSkill(skill, {flavor, fastforward: true}).then(async (result) => {\n            if(result.total >= DC){\n                await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n            }\n        })\n         \n    }\n} else if (args[0] === \"off\") {\n// do any clean up\n}","author":"X4uo406iXTm4HkVN","img":"modules/combat-utility-belt/icons/grappled.svg","actorIds":[]}
{"_id":"88zcUA01VHHD8DJC","name":"DAEGrappler","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// Grapple true\nconst lastArg = args[args.length-1];\nlet DAEConditions = game.macros.getName(\"DAEConditions\");\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nlet org = lastArg.origin.split('.');\nlet aactor = game.actors.get(org[1]);\nlet skill = (tactor.data.data.skills.ath.total >= tactor.data.data.skills.acr.total) ? 'ath' : 'acr';\nlet item = lastArg.efData.flags.dae.itemData;\nconst DC = (lastArg == args[1]) ? false : parseInt(item.data.save.dc);\n\nlet flavor = '';\nlet aCondition = item.data.activation.condition;\nlet conditions = (aCondition) ? aCondition.split(';'):false;\nlet rm = await DAEConditions.execute(conditions, tactor);\nif (args[0] === \"on\") {\n    console.log(conditions, rm, conditions.length);\n    if((conditions && rm == conditions.length) || conditions == false){\n        if(token.id != lastArg.tokenId && lastArg == args[1]){\n            await aactor.rollSkill('ath').then(async (result) => {\n                let res = await tactor.rollSkill(skill, {flavor, fastforward: true});\n                if(result.total <= res.total){\n                    await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n                }else{\n                    let aef = tactor.getEmbeddedCollection(\"ActiveEffect\").find(a=>a.label == \"Grapple\");\n                    await tactor.deleteEmbeddedEntity(\"ActiveEffect\", aef._id);\n                }\n            });\n        }\n    }else{\n        await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n    }\n} else if (args[0] === \"each\") {\n    if(game.cub.hasCondition(\"Restrained\", tactor) && lastArg == args[1]){\n        await aactor.rollSkill('ath').then(async (result) => {\n            let res = await tactor.rollSkill(skill, {flavor, fastforward: true});\n            if(result.total <= res.total){\n                await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n            }\n        });\n    }else if(game.cub.hasCondition(\"Restrained\", tactor) && DC != false){\n        await tactor.rollSkill(skill, {flavor, fastforward: true}).then(async (result) => {\n            if(result.total >= DC){\n                await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n            }\n        })\n         \n    }\n} else if (args[0] === \"off\") {\n// do any clean up\n}","author":"X4uo406iXTm4HkVN","img":"modules/combat-utility-belt/icons/grappled.svg","actorIds":[]}
{"_id":"7e1Ggusc7R5eYK0X","name":"DAERepeat","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"//DAERepeat @token @target itemName\nif(args[0] === 'each'){\n    console.log(\"EACH\", args);\n    let atoken = canvas.tokens.get(args[1]);\n    let atarget = canvas.tokens.get(args[2]);\n    let saveTargets = game.user.targets;\n    let damageItem = atoken.actor.items.getName(args[3]);\n    let aCondition = damageItem.data.data.activation.condition;\n    \n    if(aCondition && game.cub.hasCondition(aCondition, atarget)){\n        await atoken.actor.deleteEmbeddedEntity(\"ActiveEffect\", effectId);\n        return;\n    }\n    game.user.targets = new Set([atarget]);\n    try {\n        damageItem.roll();\n    } finally {\n        game.user.targets = saveTargets;\n    }\n}","author":"X4uo406iXTm4HkVN","img":"assets/icons/icones-flat/Icon.4_03.png","actorIds":[]}
{"_id":"9HN1BvNhBWTFJFPs","name":"DAERollTable","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"//DAERollTable Tablename\nif(args[0] === \"each\"){\n    game.tables.getName(args[1]).draw();\n}","author":"X4uo406iXTm4HkVN","img":"icons/svg/d20.svg","actorIds":[]}
{"_id":"3bjaEBbzCkYrPKgM","name":"DAESelfRepeat","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// usado apra marcar qual inimigo vai repetir o ataque\n// SelfRepeat Engulf end\n\nconst lastArg = args[args.length-1];\nlet effectId = lastArg.effectId;\nlet macroRepeat = (args[2] && args[2] != lastArg)? 'endEveryTurn':'startEveryTurn';\n\nconsole.log(\"Self Repeat args are \", ...args);\nlet tgtoken;\nlet tgactor;\nif (lastArg.tokenId){\n    tgtoken = canvas.tokens.get(lastArg.tokenId);\n    tgactor = tgtoken.actor;\n} \nelse tgactor = game.actors.get(lastArg.actorId);\n\nlet org = lastArg.origin.split('.');\nlet orgItem = lastArg.efData.flags.dae.itemData;\nlet aCondition = orgItem.data.activation.condition;\nlet conditions = (aCondition)? aCondition.split(',') : false;\nlet item = (typeof args[1] === 'string')? _token.actor.items.find(i => i.name == args[1]) : _token.actor.items.find(i => i.id === args[1]._id);\n\nlet REPEAT_EFFECT = {\n    label: `Repeat_${tgtoken.name}`,\n    icon: item.img,\n    changes: [\n      {key: \"macro.execute\", \n      value: `DAEAttack ${_token.id} ${lastArg.tokenId} ${item.name}`, \n      mode: ACTIVE_EFFECT_MODES.CUSTOM\n      }\n    ],\n    flags: {\n        dae: {\n            macroRepeat: macroRepeat,\n            //specialDuration: [\"turnStart\"]\n        }\n    },\n    transfer: true,\n  };\n  if(args[0] === 'on'){\n    let activeConditions = await _token.actor.getEmbeddedCollection(\"ActiveEffect\")\n    .find(a=> a.label === `Repeat_${tgtoken.name}`);\n    if(!activeConditions){\n        let upItem = Object.assign(REPEAT_EFFECT, {_id: item._id});\n        await _token.actor.createEmbeddedEntity(\"ActiveEffect\", [REPEAT_EFFECT]);  \n    }\n  }","author":"X4uo406iXTm4HkVN","img":"assets/icons/icones-flat/Icon.2_72.png","actorIds":[]}
{"_id":"w2bLSRS0326v45pk","name":"EnlargeReduce","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.tKKbvoCkf5A37rsc"},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target \n\n/**\n * For each target, the GM will have to choose \n */\nlet target = canvas.tokens.get(args[1]);\nlet originalSize = target.data.width;\nlet mwak = target.actor.data.data.bonuses.mwak.damage;\n\nif (args[0] === \"on\") {\n    new Dialog({\n        title: \"Enlarge or Reduce\",\n        buttons: {\n            one: {\n                label: \"Enlarge\",\n                callback: () => {\n                    let bonus = mwak + \" 1d4\";\n                    let enlarge = (originalSize + 1);\n                    target.actor.update({ \"data.bonuses.mwak.damage\": bonus });\n                    target.update({ \"width\": enlarge, \"height\": enlarge });\n                    target.actor.setFlag('world', 'enlageReduceSpell', {\n                        size: originalSize,\n                        ogMwak: mwak,\n                    });\n                    ChatMessage.create({ content: target.name + \" is enlarged\" });\n                }\n            },\n            two: {\n                label: \"Reduce\",\n                callback: () => {\n                    let bonus = mwak + \" -1d4\";\n                    let size = originalSize;\n                    let newSize = (size > 1) ? (size - 1) : (size - 0.3);\n                    target.actor.update({ \"data.bonuses.mwak.damage\": bonus });\n                    target.update({ \"width\": newSize, \"height\": newSize });\n                    target.actor.setFlag('world', 'enlageReduceSpell', {\n                        size: originalSize,\n                        ogMwak: mwak,\n                    });\n                    ChatMessage.create({ content: target.name + \" is reduced\" });\n                }\n            },\n        }\n    }).render(true);\n}\nif (args[0] === \"off\") {\n    let flag = target.actor.getFlag('world', 'enlageReduceSpell');\n    target.actor.update({ \"data.bonuses.mwak.damage\": flag.ogMwak });\n    target.update({ \"width\": flag.size, \"height\": flag.size });\n    target.actor.unsetFlag('world', 'enlageReduceSpell');\n    ChatMessage.create({ content: target.name + \" is returned to normal size\" });\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/spells/link-blue-2.jpg","actorIds":[]}
{"_id":"cDRwSy2yGKb80zxO","name":"Invisibility","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"//DAE Macro Execute, Effect Value = \"Macro Name\" @target\n\nlet target = canvas.tokens.get(args[1])\nif (args[0] === \"on\") {\n    ChatMessage.create({ content: `${target.name} turns invisible` });\n    target.update({ \"hidden\": true });\n}\nif (args[0] === \"off\") {\n    ChatMessage.create({ content: `${target.name} re-appears` });\n    target.update({ \"hidden\": false });\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/spells/fog-sky-2.jpg","actorIds":[]}
{"_id":"1a4y2if1AEOVTDTu","name":"Reoccuring Effect","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"exportSource":{"world":"testWorld","system":"dnd5e","coreVersion":"0.7.9","systemVersion":"1.2.4"},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// arguments\n//args[0] --> \"on\", \"each\", \"off\"\n//args[1] --> the level the spell was cast (usually @item.level)\n//args[2] --> save allowed (\"yes\"/\"no\"), e.g. damage effects that can only be ended using an action)\n//args[3] --> damage mode \n//              \"none\" for effects without damage\n//              \"flat\" for fixed damage from argument baseDamage\n//              \"scaling\" for damage scaling based on castLevel\n//args[4] --> damage type\n//args[5] --> baseDamage (e.g. 1d6)\n//args[6] --> scalingDieCount (e.g. 2 for 2dX scaling per spell level)\n//args[7] --> scalingDieSize (e.g. d6 for Xd6 scaling per spell level)\n//args[8] --> saveType (if spell does not contain a saving throw, e.g. Paladin smites)\n//args[9] --> flat DC\n\nif (args[0] === \"each\") {\n\n  const lastArg = args[args.length-1];\n  const castLevel = args[1];\n  const saveAllowed = args[2];\n  const damageMode = args[3];\n  const damageType = args[4];\n  const baseDamage = args[5];\n  const scalingDieCount = args[6];\n  const scalingDieSize = args[7];\n  let saveType = args[8];\n  let dc = args[9];\n\n  let target;\n  if (lastArg.tokenId) target = canvas.tokens.get(lastArg.tokenId);\n    else target = game.actors.get(lastArg.actorId).getActiveTokens(0);\n  const effect = lastArg.effectId;\n  const casterItem = lastArg.efData.flags.dae.itemData;\n  const casterItemLevel = casterItem.data.level;\n  const [_1, casterId, _2, _3] = lastArg.efData.origin.split(\".\")\n  const caster = game.actors.get(casterId);\n  const casterT = caster.isToken ? caster.token : caster.getActiveTokens[0];\n\n  let effectEnds;\n  \n  //Determine saveType and dc if save is allowed and ask for save\n  //Priority for save: 1) values in args[8] and args[9]\n  //          2) values stored in the item\n  if (saveAllowed === \"yes\") {\n      if (saveType === null) {\nChatMessage.create({ content: \"Hallo\" });   \n        saveType = casterItem.data.save.ability;\n        dc = casterItem.data.save.dc;\n      }\n      const flavor = `${CONFIG.DND5E.abilities[saveType]} DC${dc} ${casterItem.name}`;  \n      let save = (await target.actor.rollAbilitySave(saveType, {flavor, fastforward: true, chatMessage: true}));\n      if (save.total >= dc) effectEnds = true;\n        else effectEnds = false;\n  } else effectEnds = false;\n\n\n  //Delete effect if saved; otherwise do damage, if effect has damage over time\n  if (effectEnds) {\n    if (target) target.actor.deleteEmbeddedEntity(\"ActiveEffect\", effect);\n  } else {\n    let damageRoll;\n    if (damageMode != \"none\") {\n      let damageFormula;\n      if (damageMode === \"scaling\" && castLevel-casterItemLevel > 0) {\n        damageFormula = baseDamage + \"+\" + (castLevel-casterItemLevel) * scalingDieCount + scalingDieSize;\n      } else {\n        damageFormula = baseDamage;\n      }\n      damageRoll = new Roll(damageFormula).roll();\n      new MidiQOL.DamageOnlyWorkflow(caster, casterT, damageRoll.total, damageType, [target], damageRoll, {flavor: `Damage for ${casterItem.name}`, itemCardId: \"new\", itemData: casterItem})\n    }\n  }\n}","author":"iv1xD7Xolui8SRLL","img":"systems/dnd5e/icons/skills/affliction_02.jpg","actorIds":[]}
{"_id":"CMwhsma1DZ4uB17Z","name":"RepeatDamage","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"//RepeatDamage @token @target @item | NameItem [itemToken]\nif(args[1] == null){\n    let atarget=[];\n    //Magia veio de uma Aura\n    let org = args[args.length -1].origin.split('.');\n    let aactor = game.actors.get(org[1]);\n    if(canvas.tokens.get(args[args.length -1].tokenId).actor.id == aactor.id){\n        canvas.tokens.placeables.map(entity=>{\n            if(entity.actor.id != aactor.id){\n                entity.actor.effects.map(ef=>{\n                    if(ef.data.origin == args[args.length -1].origin && ef.data.label == args[args.length -1].efData.label){\n                        atarget.push(entity)\n                        console.log(\"Alvo é : \", entity.name, ef.data.label);\n                    }\n                });\n            }\n        });\n        let saveTargets = game.user.targets;\n        game.user.targets = new Set(atarget);\n        try {\n            let damageItem = aactor.items.get(org[3]);\n            damageItem.roll();\n        } finally {\n            game.user.targets = saveTargets;\n        }\n    }\n}else{\n    if(args[0] === 'each'){\n        let atoken = canvas.tokens.get(args[1]);\n        let atarget = canvas.tokens.get(args[2]);\n        let damageItem = (args[3].id) ? atoken.actor.items.get(args[3]._id) : atoken.actor.items.getName(args[3]);\n        let saveTargets = game.user.targets;\n        game.user.targets = new Set([atarget]);\n        try {\n           await damageItem.roll();\n           if(args[4]){\n               game.user.targets = new Set([atoken]);\n           }\n        } finally {\n            game.user.targets = saveTargets;\n        }\n    }\n    //console.log(args)\n}","author":"X4uo406iXTm4HkVN","img":"assets/icons/icones-flat/Icon.4_03.png","actorIds":[]}
{"_id":"vJNB3G0cC8LVBbgx","name":"RepeatTest","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"//console.log(\"ENTRA\", args);\n// \"RepeatTest\" str dc condition @token @target\nlet ttoken = canvas.tokens.get(args[4]);\nlet atargets = canvas.tokens.get(args[5]);\nlet tactor = atargets.actor;\nlet dc = args[2];\nlet skill = args[1];\nlet cond = args[3];\nlet lastArg = args[args.length-1];\nlet effectId = lastArg.effectId;\nif (args[0] === \"each\") {\n    if (Object.entries(game.dnd5e.config.skills).map(a => a[0]).includes(skill)){\n        tactor.rollSkill(skill).then((result) => {\n            if (result.total >= dc) {\n                atargets.actor.deleteEmbeddedEntity(\"ActiveEffect\", effectId);\n            }\n        });\n    }else if (Object.entries(game.dnd5e.config.abilities).map(a => a[0]).includes(skill)){\n        tactor.rollAbilityTest(skill).then((result) => {\n            if (result.total >= dc) {\n                atargets.actor.deleteEmbeddedEntity(\"ActiveEffect\", effectId);\n            }\n        });\n    }\n    \n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/blue_01.jpg","actorIds":[]}
{"_id":"llJdt3as1TcTGe1S","name":"Until Save","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000"}},"scope":"global","command":"// Two versions one that fetches damage/save/dc from item and one that use args like \n// macro.execute CUSTOM \"Until Save\" cha 15 \n// Get some useful info.\n// active conition (requer uma condição especifica apra o efeito funcionar)\n\nconst lastArg = args[args.length-1];\nconsole.log(\"Until Save args are \", ...args);\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nelse tactor = game.actors.get(lastArg.actorId);\nlet item = lastArg.efData.flags.dae.itemData;\nlet aCondition = item.data.activation.condition;\nlet conditions = (aCondition)? aCondition.split(','):false;\n\nconsole.log(conditions)\n\nif (args[0] === \"on\") {\n    // Do any setup/first application as required.\n    let rm = 0;\n    let verif\n    if(conditions != false){\n        for (let c of conditions){\n            let cond = c.split(':');\n            cond[0] = cond[0].trim();\n            switch (cond[0]) {\n                case 'Condition':\n                    if(game.cub.hasCondition(cond[1].trim(), tactor)) rm ++;\n                    break;\n                case 'Size':\n                    if(tactor.data.data.traits.size == cond[1].trim()) rm++;\n                    break;\n                case 'Alignment':\n                    verif = tactor.data.data.details.alignment.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                case 'Type':\n                    verif = tactor.data.data.details.type.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                default:\n            }\n        }\n        if(rm != conditions.length){\n            await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n        }\n    }\n} else if (args[0] === \"each\") {\n  const saveType = (args[1] && args[1] != lastArg)? args[1]: item.data.save.ability;\n  const DC = (args[2] && args[2] != lastArg)? args[2]: item.data.save.dc;\n  const flavor = `${CONFIG.DND5E.abilities[saveType]} DC${DC} ${item?.name || \"\"}`;\n  let save = (await tactor.rollAbilitySave(saveType, {flavor, fastforward: true})).total; \n  if (save > DC) {\n    if (tactor) tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId); \n    // remove the effect, this macro will be called again with \"off\" when the effect has been deleted.\n  }else if(item.data.formula){\n      let dd = item.data.formula.split('[');\n      let dtype =(dd.length > 1) ? dd[1].slice(0, -1):item.data.damage.parts[0][1];\n      console.log(dd, dtype)\n        let damageRoll = new Roll(dd[0]).roll(); // could be passed as an argument\n        new MidiQOL.DamageOnlyWorkflow(actor, token, damageRoll.total, dtype, [token], damageRoll, {flavor: `Failed Save for ${item.name} - damage type ${dtype}`, item})\n\n  }\n} else if (args[0] === \"off\") {\n// do any clean up\n}","author":"X4uo406iXTm4HkVN","img":"assets/icons/icones-flat/Icon.4_03.png","actorIds":[]}
{"_id":"7YOh9VI23mY4eXmO","name":"#[CF_tempEntity]","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"chat","flags":{"cf":{"id":"temp_1wixx6as5pj","path":"DAE","color":"#800000","name":"DAE","children":["nEl7iFhyJaHR8JvV","Xjd9FfJLJqZqJr73","LadveiqOuZ8alEYp","cDRwSy2yGKb80zxO","w2bLSRS0326v45pk","d2OuKcbeO0o53zhJ","vJNB3G0cC8LVBbgx","oazlmnKwPTeCsAKG","7e1Ggusc7R5eYK0X","VEmKbV6xSPl4v3jY","EHSkswVF9UCAI0lz","KiW0QWxf5jiWiti2","PdsiGpwvloC0e0T3","9HN1BvNhBWTFJFPs","Iui3JBZDFxS3J1Q4","obJPeJAHH8o7L5Zl","1a4y2if1AEOVTDTu","CMwhsma1DZ4uB17Z","llJdt3as1TcTGe1S","3bjaEBbzCkYrPKgM","EUnnHrdw7VpKAWig","88zcUA01VHHD8DJC"],"folderPath":[]}},"scope":"global","command":"","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","actorIds":[]}
