{"name":"DAERollTable","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}},"scope":"global","command":"//DAERollTable Tablename\nif(args[0] === \"each\"){\n    game.tables.getName(args[1]).draw();\n}","author":"X4uo406iXTm4HkVN","img":"icons/svg/d20.svg","actorIds":[],"_id":"1WjzN8HKjr3Q02W6"}
{"name":"RollTable: Orientation","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Orientation","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_vd9wmfl2y6","path":"Roll Tables","color":"#008000"}},"scope":"global","command":"game.tables.getName(\"Orientation\").draw();","author":"X4uo406iXTm4HkVN","img":"icons/tools/navigation/compass-brass-blue-red.webp","actorIds":[],"_id":"1rqDqtjNNPzhH73i"}
{"name":"Reoccuring Effect","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"exportSource":{"world":"testWorld","system":"dnd5e","coreVersion":"0.7.9","systemVersion":"1.2.4"},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}},"scope":"global","command":"// arguments\n//args[0] --> \"on\", \"each\", \"off\"\n//args[1] --> the level the spell was cast (usually @item.level)\n//args[2] --> save allowed (\"yes\"/\"no\"), e.g. damage effects that can only be ended using an action)\n//args[3] --> damage mode \n//              \"none\" for effects without damage\n//              \"flat\" for fixed damage from argument baseDamage\n//              \"scaling\" for damage scaling based on castLevel\n//args[4] --> damage type\n//args[5] --> baseDamage (e.g. 1d6)\n//args[6] --> scalingDieCount (e.g. 2 for 2dX scaling per spell level)\n//args[7] --> scalingDieSize (e.g. d6 for Xd6 scaling per spell level)\n//args[8] --> saveType (if spell does not contain a saving throw, e.g. Paladin smites)\n//args[9] --> flat DC\n\nif (args[0] === \"each\") {\n\n  const lastArg = args[args.length-1];\n  const castLevel = args[1];\n  const saveAllowed = args[2];\n  const damageMode = args[3];\n  const damageType = args[4];\n  const baseDamage = args[5];\n  const scalingDieCount = args[6];\n  const scalingDieSize = args[7];\n  let saveType = args[8];\n  let dc = args[9];\n\n  let target;\n  if (lastArg.tokenId) target = canvas.tokens.get(lastArg.tokenId);\n    else target = game.actors.get(lastArg.actorId).getActiveTokens(0);\n  const effect = lastArg.effectId;\n  const casterItem = lastArg.efData.flags.dae.itemData;\n  const casterItemLevel = casterItem.data.level;\n  const [_1, casterId, _2, _3] = lastArg.efData.origin.split(\".\")\n  const caster = game.actors.get(casterId);\n  const casterT = caster.isToken ? caster.token : caster.getActiveTokens[0];\n\n  let effectEnds;\n  \n  //Determine saveType and dc if save is allowed and ask for save\n  //Priority for save: 1) values in args[8] and args[9]\n  //          2) values stored in the item\n  if (saveAllowed === \"yes\") {\n      if (saveType === null) {\nChatMessage.create({ content: \"Hallo\" });   \n        saveType = casterItem.data.save.ability;\n        dc = casterItem.data.save.dc;\n      }\n      const flavor = `${CONFIG.DND5E.abilities[saveType]} DC${dc} ${casterItem.name}`;  \n      let save = (await target.actor.rollAbilitySave(saveType, {flavor, fastforward: true, chatMessage: true}));\n      if (save.total >= dc) effectEnds = true;\n        else effectEnds = false;\n  } else effectEnds = false;\n\n\n  //Delete effect if saved; otherwise do damage, if effect has damage over time\n  if (effectEnds) {\n    if (target) target.actor.deleteEmbeddedEntity(\"ActiveEffect\", effect);\n  } else {\n    let damageRoll;\n    if (damageMode != \"none\") {\n      let damageFormula;\n      if (damageMode === \"scaling\" && castLevel-casterItemLevel > 0) {\n        damageFormula = baseDamage + \"+\" + (castLevel-casterItemLevel) * scalingDieCount + scalingDieSize;\n      } else {\n        damageFormula = baseDamage;\n      }\n      damageRoll = new Roll(damageFormula).roll();\n      new MidiQOL.DamageOnlyWorkflow(caster, casterT, damageRoll.total, damageType, [target], damageRoll, {flavor: `Damage for ${casterItem.name}`, itemCardId: \"new\", itemData: casterItem})\n    }\n  }\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/affliction_02.jpg","actorIds":[],"_id":"51UjG9KrG0bzOCqO"}
{"name":"#[CF_tempEntity]","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"chat","flags":{"cf":{"id":"temp_vd9wmfl2y6","path":"Roll Tables","color":"#008000","name":"Roll Tables","children":["w8MExLHMIGt1K4KO","HEbMljxKEOZBEgYp","ilOnM4PONpYPZ8uV","1rqDqtjNNPzhH73i","GCmalnLgLekr0TXS"],"folderPath":[]}},"scope":"global","command":"","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"88LJ6VPHI1cZEGsj"}
{"name":"DAEConditions","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}},"scope":"global","command":"// args[0] = conditions\n//args[1] = tactor;\nlet rm = 0;\nlet verif;\nlet sTypes;\n    if(args[0] != false){\n        for (let c of args[0]){\n            let cond = c.split(':');\n            cond[0] = cond[0].trim();\n            switch (cond[0]) {\n                case 'Condition':\n                    if(game.cub.hasCondition(cond[1].trim(), args[1])) rm ++;\n                    break;\n                case 'Size':\n                    sTypes = cond[1].trim().split(',');\n                    if(sTypes.includes(args[1].data.data.traits.size)) rm++;\n                    break;\n                case 'Alignment':\n                    verif = args[1].data.data.details.alignment.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                case 'Type':\n                    verif = args[1].data.data.details.type.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                default:\n            }\n        }\n    }\n    return rm;","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"8oJ4SPjhNWFb7Fn1"}
{"name":"DAEAura","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}},"scope":"global","command":"// DAEAura @token @item self\nconsole.log(args);\nlet atoken = canvas.tokens.get(args[1]);\nlet lastArg = args[args.length-1];\nlet effectId = lastArg.effectId;\nlet atarget=[];\nlet self = (args[3]!== lastArg && args[3] == 'self') ? true : false;\nif(args[0] === 'on' || args[0] === 'each'){\n    if(self && atoken.actor.id != lastArg.actorId) return;\n    canvas.tokens.placeables.map(entity=>{\n        entity.actor.effects.map(ef=>{\n            if(ef.data.origin == lastArg.origin && ef.data.label == lastArg.efData.label){\n                if(entity.actor.id == lastArg.actorId && self){\n                    atarget.push(entity);\n                }else if(entity.actor.id != lastArg.actorId){\n                    atarget.push(entity);\n                }\n            }\n        });\n    });\n    console.log(atoken, atarget);\n    let saveTargets = game.user.targets;\n        game.user.targets = new Set(atarget);\n        try {\n            let damageItem = (typeof args[2] === 'string') ? atoken.actor.items.find(i => i.name === args[2]) : atoken.actor.items.find(i => i.id === args[2]._id);\n            console.log(damageItem);\n            damageItem.roll();\n        } finally {\n            game.user.targets = saveTargets;\n        }\n    \n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/spells/wind-grasp-magenta-2.jpg","actorIds":[],"_id":"9x6dLAlAaqygjfmS"}
{"name":"RollTable: Research Complications","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Research Complications","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_vd9wmfl2y6","path":"Roll Tables","color":"#008000"}},"scope":"global","command":"game.tables.getName(\"Research Complications\").draw();","author":"X4uo406iXTm4HkVN","img":"icons/sundries/books/book-embossed-gold-red.webp","actorIds":[],"_id":"GCmalnLgLekr0TXS"}
{"name":"RollTable: Complications","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Complications","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_vd9wmfl2y6","path":"Roll Tables","color":"#008000"}},"scope":"global","command":"game.tables.getName(\"Complications\").draw();","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/red_28.jpg","actorIds":[],"_id":"HEbMljxKEOZBEgYp"}
{"name":"DAESelfRepeat","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}},"scope":"global","command":"// usado apra marcar qual inimigo vai repetir o ataque\n// SelfRepeat Engulf end\n\nconst lastArg = args[args.length-1];\nlet effectId = lastArg.effectId;\nlet macroRepeat = (args[2] && args[2] != lastArg)? 'endEveryTurn':'startEveryTurn';\n\nconsole.log(\"Self Repeat args are \", ...args);\nlet tgtoken;\nlet tgactor;\nif (lastArg.tokenId){\n    tgtoken = canvas.tokens.get(lastArg.tokenId);\n    tgactor = tgtoken.actor;\n} \nelse tgactor = game.actors.get(lastArg.actorId);\n\nlet org = lastArg.origin.split('.');\nlet orgItem = lastArg.efData.flags.dae.itemData;\nlet aCondition = orgItem.data.activation.condition;\nlet conditions = (aCondition)? aCondition.split(',') : false;\n\nlet REPEAT_EFFECT = {\n    label: `Repeat_${tgtoken.name}`,\n    icon: lastArg.efData.icon,\n    changes: [\n      {key: \"macro.execute\", \n      value: `DAEAttack ${_token.id} ${lastArg.tokenId} ${args[1]}`, \n      mode: ACTIVE_EFFECT_MODES.CUSTOM\n      }\n    ],\n    flags: {\n        dae: {\n            macroRepeat: macroRepeat\n        }\n    },\n    transfer: true,\n  };\n  if(args[0] === 'on'){\n    let activeConditions = await _token.actor.getEmbeddedCollection(\"ActiveEffect\")\n    .find(a=> a.label === `Repeat_${tgtoken.name}`);\n    if(!activeConditions){\n        let upItem = Object.assign(REPEAT_EFFECT, {_id: lastArg.efData._id});\n        await _token.actor.createEmbeddedEntity(\"ActiveEffect\", [REPEAT_EFFECT]);  \n    }\n  }","author":"X4uo406iXTm4HkVN","img":"assets/icons/icones-flat/Icon.2_72.png","actorIds":[],"_id":"Hfmoyuuz29aupbRc"}
{"name":"#[CF_tempEntity]","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"chat","flags":{"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000","name":"DAE","children":["qIRyPTF4E1p6VT8r","hpkqSIiiNHkFWYpO","Zkr624s95L1GMhDn","9x6dLAlAaqygjfmS","kFAk71loNB02sUsD","8oJ4SPjhNWFb7Fn1","Rue2uR5U72u8ND7v","octT6lsJNX0dCiKV","gPmEcO9hroTTBH7t","1WjzN8HKjr3Q02W6","Hfmoyuuz29aupbRc","lUvYFZQ8Ls6tncil","NFOnsUtAmd6FbndR","51UjG9KrG0bzOCqO","qozoBrs5Q7KT49Mm"],"folderPath":[]}},"scope":"global","command":"","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"RkAsCLVcGEDyK8We"}
{"name":"DAEDamage","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}},"scope":"global","command":"let adamage = args[1];\nlet atype = args[2];\nlet atoken = canvas.tokens.get(args[3]);\nlet atarget = canvas.tokens.get(args[4]);\nlet lastArg = args[args.length-1];\nlet casterItem = lastArg.efData.flags.dae.itemData;\n\nconsole.log(atoken, atarget);\n//let aactor = game.actors.get(atoken.actor.id)\n\nif (args[0] === \"each\") {\n    let damageRoll = new Roll(adamage).roll();\n    new MidiQOL.DamageOnlyWorkflow(atoken.actor, atoken, damageRoll.total, atype, [atarget], damageRoll,{flavor: `Damage type - (${atype})`, itemCardId: \"new\", itemData: casterItem})\n    \n}","author":"X4uo406iXTm4HkVN","img":"assets/icons/icones-flat/Icon.4_85.png","actorIds":[],"_id":"Rue2uR5U72u8ND7v"}
{"name":"DAEAttackEnd","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}},"scope":"global","command":"// DAEAttackEnd @item|itemName\nif(args){\nconst lastArg = args[args.length-1];\nlet DAEConditions = game.macros.getName(\"DAEConditions\");\nconsole.log(\"ARGS\",args);\n\nlet ttoken =  canvas.tokens.get(lastArg.tokenId);\nlet tactor = ttoken.actor;\n\nlet org = (lastArg.origin != undefined) ? lastArg.origin.split('.') : args[1];\n\nconsole.log(ttoken.name);\n\nlet item= tactor.items.getName(args[1]);\n\nconsole.log(\"DAMAGE\",item);\nlet aCondition = item.data.data.activation.condition;\nlet conditions = (aCondition) ? aCondition.split(';'):false;\nconsole.log(\"Conditions\",conditions, aCondition);\n\nlet rm = await DAEConditions.execute(conditions, tactor);\n\nif(args[0] == \"off\"){\n    if((conditions && rm == conditions.length) || conditions == false){\n         new MidiQOL.DamageOnlyWorkflow(actor, token, damageRoll.total, dtype, [token], damageRoll, {flavor: `Failed Save for ${item.name} - damage type ${dtype}`, item});\n    }\n}\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/violet_20.jpg","actorIds":[],"_id":"Zkr624s95L1GMhDn"}
{"name":"DAEGrappler","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}},"scope":"global","command":"// DAEGrappler true\nconst lastArg = args[args.length-1];\nlet DAEConditions = game.macros.getName(\"DAEConditions\");\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nlet org = lastArg.origin.split('.');\nlet aactor = game.actors.get(org[1]);\nlet skill = (tactor.data.data.skills.ath.total >= tactor.data.data.skills.acr.total) ? 'ath' : 'acr';\nlet item = lastArg.efData.flags.dae.itemData;\nconst DC = (lastArg == args[1]) ? false : parseInt(item.data.save.dc);\n\nlet flavor = '';\nlet aCondition = item.data.activation.condition;\nlet conditions = (aCondition) ? aCondition.split(';'):false;\nlet rm = await DAEConditions.execute(conditions, tactor);\nif (args[0] === \"on\") {\n    console.log(conditions, rm, conditions.length);\n    if((conditions && rm == conditions.length) || conditions == false){\n        if(token.id != lastArg.tokenId && lastArg == args[1]){\n            await aactor.rollSkill('ath').then(async (result) => {\n                let res = await tactor.rollSkill(skill, {flavor, fastforward: true});\n                if(result.total <= res.total){\n                    await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n                }else{\n                    let aef = tactor.getEmbeddedCollection(\"ActiveEffect\").find(a=>a.label == \"Grapple\");\n                    if(aef)\n                    await tactor.deleteEmbeddedEntity(\"ActiveEffect\", aef._id);\n                }\n            });\n        }\n    }else{\n        await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n    }\n} else if (args[0] === \"each\") {\n    if(game.cub.hasCondition(\"Restrained\", tactor) && lastArg == args[1]){\n        await aactor.rollSkill('ath').then(async (result) => {\n            let res = await tactor.rollSkill(skill, {flavor, fastforward: true});\n            if(result.total <= res.total){\n                await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n            }\n        });\n    }else if(game.cub.hasCondition(\"Restrained\", tactor) && DC != false){\n        await tactor.rollSkill(skill, {flavor, fastforward: true}).then(async (result) => {\n            if(result.total >= DC){\n                await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n            }\n        })\n         \n    }\n} else if (args[0] === \"off\") {\n// do any clean up\n}","author":"X4uo406iXTm4HkVN","img":"modules/combat-utility-belt/icons/grappled.svg","actorIds":[],"_id":"gPmEcO9hroTTBH7t"}
{"name":"DAEAttack","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}},"scope":"global","command":"// DAEAttack @item|itemName\n// DAEAttack @token @target @item|itemname\n//console.log(\"ON ATACK\", args);\nif(!args) return;\nconst lastArg = args[args.length-1];\nlet DAEConditions = game.macros.getName(\"DAEConditions\");\nconsole.log(\"ARGS\",args);\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nif (args.length > 3) tactor = canvas.tokens.get(args[2]).actor;\n\nlet org = (lastArg.origin != undefined)?lastArg.origin.split('.'):args[1];\nlet atoken = (args.length > 3) ? canvas.tokens.get(args[1]) : _token;\n\nlet item;\n\nlet origitem = lastArg.efData.flags.dae.itemData;\nif(args.length < 3) item = atoken.actor.items.find(i => i.id === origitem._id);\nif(args.length == 3) item = (typeof args[1] === 'string') ? atoken.actor.items.find(i => i.name === args[1]) : atoken.actor.items.find(i => i.id === args[1]._id);\nif(args.length > 3) item = (typeof args[3] === 'string') ? atoken.actor.items.find(i => i.name === args[3]) : atoken.actor.items.find(i => i.id === args[3]._id);\n\n\nconsole.log(\"DAMAGE\",item, origitem);\nlet aCondition = (origitem)?origitem.data.activation.condition: item.data.data.activation.condition;\nlet conditions = (aCondition) ? aCondition.split(';'):false;\nconsole.log(\"Conditions\",conditions, aCondition);\n\nlet rm = await DAEConditions.execute(conditions, tactor);\nif(args[0] == \"on\"){\n    if((conditions && rm == conditions.length) || conditions == false){\n        item.roll();\n    }\n}else if(args[0] == \"each\"){\n    if((conditions && rm == conditions.length) || conditions == false){\n        item.roll();\n    }else{\n        await atoken.actor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n    }\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/weapon_23.jpg","actorIds":[],"_id":"hpkqSIiiNHkFWYpO"}
{"name":"RollTable: Erro Crítico","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Erro Critico","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_vd9wmfl2y6","path":"Roll Tables","color":"#008000"}},"scope":"global","command":"game.tables.getName(\"Erro Crítico\").draw();","author":"X4uo406iXTm4HkVN","img":"icons/svg/d20-black.svg","actorIds":[],"_id":"ilOnM4PONpYPZ8uV"}
{"name":"DAECenterToken","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}},"scope":"global","command":"//@token\nconst lastArg = args[args.length-1];\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId);\nlet atoken = canvas.tokens.get(args[1])\n\nif(args[0] === 'on'){\n    tactor.update({x: atoken.center.x, y: atoken.center.y});\n}","author":"X4uo406iXTm4HkVN","img":"systems/dnd5e/icons/skills/yellow_34.jpg","actorIds":[],"_id":"kFAk71loNB02sUsD"}
{"name":"DAEGrapple","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}},"scope":"global","command":"// Grapple true\nconst lastArg = args[args.length-1];\nlet DAEConditions = game.macros.getName(\"DAEConditions\");\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nlet org = lastArg.origin.split('.');\nlet aactor = game.actors.get(org[1]);\nlet skill = (tactor.data.data.skills.ath.total >= tactor.data.data.skills.acr.total) ? 'ath' : 'acr';\nlet item = lastArg.efData.flags.dae.itemData;\nconst DC = (lastArg == args[1]) ? false : parseInt(item.data.save.dc);\n\nlet flavor = '';\nlet aCondition = item.data.activation.condition;\nlet conditions = (aCondition) ? aCondition.split(';'):false;\nlet rm = await DAEConditions.execute(conditions, tactor);\nif (args[0] === \"on\") {\n    if((conditions && rm == conditions.length) || conditions == false){\n        if(token.id != lastArg.tokenId && lastArg == args[1]){\n            await aactor.rollSkill('ath').then(async (result) => {\n                let res = await tactor.rollSkill(skill, {flavor, fastforward: true});\n                if(result.total <= res.total){\n                    await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n                }\n            });\n        }\n    }else{\n        await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n    }\n} else if (args[0] === \"each\") {\n    if(game.cub.hasCondition(\"Grappled\", tactor) && lastArg == args[1]){\n        await aactor.rollSkill('ath').then(async (result) => {\n            let res = await tactor.rollSkill(skill, {flavor, fastforward: true});\n            if(result.total <= res.total){\n                await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n            }\n        });\n    }else if(game.cub.hasCondition(\"Grappled\", tactor) && DC != false){\n        await tactor.rollSkill(skill, {flavor, fastforward: true}).then(async (result) => {\n            if(result.total >= DC){\n                await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n            }\n        })\n         \n    }\n} else if (args[0] === \"off\") {\n// do any clean up\n}","author":"X4uo406iXTm4HkVN","img":"modules/combat-utility-belt/icons/grappled.svg","actorIds":[],"_id":"octT6lsJNX0dCiKV"}
{"name":"Until Save","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_2gq0y560gj7","path":"DAE","color":"#800000"}},"scope":"global","command":"// Two versions one that fetches damage/save/dc from item and one that use args like \n// macro.execute CUSTOM \"Until Save\" cha 15 \n// Get some useful info.\n// active conition (requer uma condição especifica apra o efeito funcionar)\n\nconst lastArg = args[args.length-1];\nconsole.log(\"Until Save args are \", ...args);\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nelse tactor = game.actors.get(lastArg.actorId);\nlet item = lastArg.efData.flags.dae.itemData;\nlet aCondition = item.data.activation.condition;\nlet conditions = (aCondition)? aCondition.split(','):false;\n\nconsole.log(conditions)\n\nif (args[0] === \"on\") {\n    // Do any setup/first application as required.\n    let rm = 0;\n    let verif\n    if(conditions != false){\n        for (let c of conditions){\n            let cond = c.split(':');\n            cond[0] = cond[0].trim();\n            switch (cond[0]) {\n                case 'Condition':\n                    if(game.cub.hasCondition(cond[1].trim(), tactor)) rm ++;\n                    break;\n                case 'Size':\n                    if(tactor.data.data.traits.size == cond[1].trim()) rm++;\n                    break;\n                case 'Alignment':\n                    verif = tactor.data.data.details.alignment.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                case 'Type':\n                    verif = tactor.data.data.details.type.trim().toLowerCase();\n                    if(verif.inclides(cond[1].trim().toLowerCase())) rm++;\n                    break;\n                default:\n            }\n        }\n        if(rm != conditions.length){\n            await tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId);\n        }\n    }\n} else if (args[0] === \"each\") {\n  const saveType = (args[1] && args[1] != lastArg)? args[1]: item.data.save.ability;\n  const DC = (args[2] && args[2] != lastArg)? args[2]: item.data.save.dc;\n  const flavor = `${CONFIG.DND5E.abilities[saveType]} DC${DC} ${item?.name || \"\"}`;\n  let save = (await tactor.rollAbilitySave(saveType, {flavor, fastforward: true})).total; \n  if (save > DC) {\n    if (tactor) tactor.deleteEmbeddedEntity(\"ActiveEffect\", lastArg.effectId); \n    // remove the effect, this macro will be called again with \"off\" when the effect has been deleted.\n  }else if(item.data.formula){\n      let dd = item.data.formula.split('[');\n      let dtype =(dd.length > 1) ? dd[1].slice(0, -1):item.data.damage.parts[0][1];\n      console.log(dd, dtype)\n        let damageRoll = new Roll(dd[0]).roll(); // could be passed as an argument\n        new MidiQOL.DamageOnlyWorkflow(actor, token, damageRoll.total, dtype, [token], damageRoll, {flavor: `Failed Save for ${item.name} - damage type ${dtype}`, item})\n\n  }\n} else if (args[0] === \"off\") {\n// do any clean up\n}","author":"X4uo406iXTm4HkVN","img":"assets/icons/icones-flat/Icon.4_03.png","actorIds":[],"_id":"qozoBrs5Q7KT49Mm"}
{"name":"RollTable: Acerto Crítico","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Acerto Crítico","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_vd9wmfl2y6","path":"Roll Tables","color":"#008000"}},"scope":"global","command":"game.tables.getName(\"Acerto Crítico\").draw();","author":"X4uo406iXTm4HkVN","img":"icons/vtt-512.png","actorIds":[],"_id":"w8MExLHMIGt1K4KO"}
