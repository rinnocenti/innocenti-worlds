{"name":"RollTable: Complications","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Complications","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.92u8sjpxV7cOPttA"}},"scope":"global","command":"game.tables.getName(\"Complications\").draw();","author":"oYLBQUHyYQcwtcvC","img":"systems/dnd5e/icons/skills/red_28.jpg","actorIds":[],"_id":"0NeJw4k1C3Bm7QzQ"}
{"name":"Edit Biografy in Compendium","permission":{"default":0,"hfVBUA9x0nVqLlXX":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let packname = \"innocenti-worlds.npcs\";\r\nlet pack = game.packs.get(packname);\r\nlet cpack = await pack.getContent();\r\ngame.actors.forEach(entry => {\r\nlet bio = entry.data.data.details.biography;\r\nlet matches = bio.value.replace(/mod-my-world/g, 'innocenti-worlds');\r\n//console.log(matches );\r\nentry.update({ 'data.details.biography.value' : matches }); \r\n})\r\nconsole.log(\"FIM\");","author":"hfVBUA9x0nVqLlXX","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"12k8l8iqr7VvImRX"}
{"name":"RollTable: Research Complications","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Research Complications","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.EZApnOGMzrRRpvf7"}},"scope":"global","command":"game.tables.getName(\"Research Complications\").draw();","author":"oYLBQUHyYQcwtcvC","img":"icons/sundries/books/book-embossed-gold-red.webp","actorIds":[],"_id":"58kURSU2aU0xBNVw"}
{"name":"SeeID","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Display Name & IDs\r\nfor(let token of canvas.tokens.controlled)\r\n{\r\n    ChatMessage.create({\r\n        content : token.name + \" \" + token.id\r\n    });\r\n}\r\n\r\nfor(let wall of canvas.walls.controlled)\r\n{\r\n    ChatMessage.create({\r\n        content : wall.name + \" \" + wall.id\r\n    })\r\n}\r\n/*\r\nfor(let light of canvas.lighting.activate)\r\n{\r\n    ChatMessage.create({\r\n        content : light.name + \" \" + light.id\r\n    })\r\n}\r\nfor (let note of canvas.notes.placeables)\r\n{\r\n    ChatMessage.create({\r\n        content :  note.name + \" \" + note.id\r\n     });\r\n}\r\n*/\r\nfor (let draw of canvas.drawings.controlled)\r\n{\r\n   ChatMessage.create({\r\n      content :  draw.name + \" \" + draw.id\r\n   });\r\n}\r\n\r\nfor (let tile of canvas.tiles.controlled)\r\n{\r\n    ChatMessage.create({\r\n        content :  tile.name + \" \" + tile.id\r\n     });\r\n}","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"5g5M5rzPz0K6E42w"}
{"name":"Give Money","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.c8zhiTOY0CwJJnr3"}},"scope":"global","command":"//Money Give/Remover\n\n(() => {\n\tlet targets = game.user.targets;\n\n\tlet targets_content = ``;\n\n\tfor (let target of targets) {\n\t\ttargets_content += `<img src=${target.data.img} width=\"50\" height=\"50\">`\n\t}\n\n\tlet dialog_content = `\n\t<div class = \"form-group\">\n\t\t<h1><img src=\"icons/commodities/currency/coins-plain-stack-gold.webp\" width=\"50px\" /> Golden Share</h1>\n\t\t<table style=\"width: 100%; text-align:center; border: 1px solid black\">\n\t\t  <tr>\n\t\t\t<thcolspan=\"2\">${targets_content}</th>\n\t\t  </tr>\n\t\t  <tr>\n\t\t\t<td><label for=\"pp\">Platnium<label></td>\n\t\t\t<td><input name=\"pp\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"></td>\n\t\t  </tr>\n\t\t  <tr>\n\t\t\t<td><label for=\"gp\">Gold    <label></td>\n\t\t\t<td><input name=\"gp\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"></td>\n\t\t  </tr>\n\t\t  <tr>\n\t\t\t<td><label for=\"ep\">Electrum<label></td>\n\t\t\t<td><input name=\"ep\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"></td>\n\t\t  </tr>\n\t\t  <tr>\n\t\t\t<td><label for=\"sp\">Silver  <label></td>\n\t\t\t<td><input name=\"sp\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"></td>\n\t\t  </tr>\n\t\t  <tr>\n\t\t\t<td><label for=\"cp\">Copper  <label></td>\n\t\t\t<td><input name=\"cp\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"></td>\n\t\t  </tr>\n\t\t</table>\n\t</div>`;\n\n\tnew Dialog({\n\t\tcontent: dialog_content,\n\t\tbuttons:\n\t\t{\n\t\t\tOk: { icon: ``, label: `Change Money.`, callback: (html) => changeMoney(targets, html) }\n\t\t}\n\t}).render(true);\n})();\n\nasync function changeMoney(targets, html) {\n\tlet difference_money = {\n\t\tpp: parseInt(html.find('[name=pp]')[0].value),\n\t\tgp: parseInt(html.find('[name=gp]')[0].value),\n\t\tep: parseInt(html.find('[name=ep]')[0].value),\n\t\tsp: parseInt(html.find('[name=sp]')[0].value),\n\t\tcp: parseInt(html.find('[name=cp]')[0].value)\n\t}\n\n\t//divide update_money based on # of targets\n\tdifference_money = divideValue(difference_money, targets.size);\n\n\t//get rid of \"extra\" stuff, display all names in header\n\tlet actor_content = ``;\n\tfor (let target of targets) { actor_content += `${target.actor.name}, `; }\n\n\tlet table_content = ``;\n\tfor (let key in difference_money) {\n\t\tif (difference_money[key] !== 0)\n\t\t\ttable_content += `<tr><td>${key} :</td><td>${difference_money[key]}</td></tr>`\n\t}\n\n\tlet content = `\n\t<h2><img src=\"icons/commodities/currency/coins-plain-stack-gold.webp\" width=\"50px\" /> Add Money</h2>\n\t<table style \"width: 100%; text-align:center; border: 1px solid black\">\n\t\t<tr>\n\t\t  <th colspan=\"2\">Money Change :</th>\n\t\t</tr>\n\t\t<tr>\n\t\t  <th colspan=\"2\">${actor_content}</th>\n\t\t</tr>\n\t\t${table_content}\n\t</table>`;\n\n\tfor (let target of targets) {\n\t\tlet original_money = duplicate(target.actor.data.data.currency);\n\t\tlet update_money = changeValue(original_money, difference_money);\n\n\t\tawait target.actor.update({ \"data.currency\": update_money });\n\t}\n\n\tChatMessage.create({ content, speaker: ChatMessage._getSpeakerFromUser({ user: game.user }) })\n}\n\nfunction changeValue(Original, Difference) {\n\tlet Update = { pp: 0, gp: 0, ep: 0, sp: 0, cp: 0 };\n\n\tfor (let key in Original) {\n\t\tUpdate[key] = Original[key] + Difference[key];\n\t\tif (Update[key] < 0) {\n\t\t\tswitch (key) {\n\t\t\t\tcase \"cp\":\n\t\t\t\t\tif (Update[\"sp\"] > 0) {\n\t\t\t\t\t\tUpdate[\"cp\"] += 10;\n\t\t\t\t\t\tUpdate[\"sp\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"ep\"] > 0) {\n\t\t\t\t\t\tUpdate[\"cp\"] += 50;\n\t\t\t\t\t\tUpdate[\"ep\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"gp\"] > 0) {\n\t\t\t\t\t\tUpdate[\"cp\"] += 100;\n\t\t\t\t\t\tUpdate[\"gp\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"pp\"] > 0) {\n\t\t\t\t\t\tUpdate[\"cp\"] += 1000;\n\t\t\t\t\t\tUpdate[\"pp\"] -= 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(`Not enough money to do that.`);\n\t\t\t\t\t}\n\t\t\t\t\tUpdate = changeValue(Update, { pp: 0, gp: 0, ep: 0, sp: 0, cp: 0 });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sp\":\n\t\t\t\t\tif (Update[\"ep\"] > 0) {\n\t\t\t\t\t\tUpdate[\"sp\"] += 5;\n\t\t\t\t\t\tUpdate[\"ep\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"gp\"] > 0) {\n\t\t\t\t\t\tUpdate[\"sp\"] += 10;\n\t\t\t\t\t\tUpdate[\"gp\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"pp\"] > 0) {\n\t\t\t\t\t\tUpdate[\"sp\"] += 100;\n\t\t\t\t\t\tUpdate[\"pp\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"cp\"] > 9) {\n\t\t\t\t\t\tUpdate[\"sp\"] += 1;\n\t\t\t\t\t\tUpdate[\"cp\"] -= 10;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(`Not enough money to do that.`);\n\t\t\t\t\t}\n\t\t\t\t\tUpdate = changeValue(Update, { pp: 0, gp: 0, ep: 0, sp: 0, cp: 0 });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ep\":\n\t\t\t\t\tif (Update[\"gp\"] > 0) {\n\t\t\t\t\t\tUpdate[\"ep\"] += 2;\n\t\t\t\t\t\tUpdate[\"gp\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"pp\"] > 0) {\n\t\t\t\t\t\tUpdate[\"ep\"] += 20;\n\t\t\t\t\t\tUpdate[\"pp\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"sp\"] > 4) {\n\t\t\t\t\t\tUpdate[\"ep\"] += 1;\n\t\t\t\t\t\tUpdate[\"sp\"] -= 5;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"cp\"] > 49) {\n\t\t\t\t\t\tUpdate[\"ep\"] += 1;\n\t\t\t\t\t\tUpdate[\"cp\"] -= 50;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(`Not enough money to do that.`);\n\t\t\t\t\t}\n\t\t\t\t\tUpdate = changeValue(Update, { pp: 0, gp: 0, ep: 0, sp: 0, cp: 0 });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"gp\":\n\t\t\t\t\tif (Update[\"pp\"] > 0) {\n\t\t\t\t\t\tUpdate[\"gp\"] += 10;\n\t\t\t\t\t\tUpdate[\"pp\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"ep\"] > 1) {\n\t\t\t\t\t\tUpdate[\"gp\"] += 1;\n\t\t\t\t\t\tUpdate[\"ep\"] -= 2;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"sp\"] > 9) {\n\t\t\t\t\t\tUpdate[\"gp\"] += 1;\n\t\t\t\t\t\tUpdate[\"sp\"] -= 10;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"cp\"] > 99) {\n\t\t\t\t\t\tUpdate[\"gp\"] += 1;\n\t\t\t\t\t\tUpdate[\"cp\"] -= 100;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(`Not enough money to do that.`);\n\t\t\t\t\t}\n\t\t\t\t\tUpdate = changeValue(Update, { pp: 0, gp: 0, ep: 0, sp: 0, cp: 0 });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"pp\":\n\t\t\t\t\tif (Update[\"gp\"] > 9) {\n\t\t\t\t\t\tUpdate[\"pp\"] += 1;\n\t\t\t\t\t\tUpdate[\"gp\"] -= 10;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"ep\"] > 19) {\n\t\t\t\t\t\tUpdate[\"pp\"] += 1;\n\t\t\t\t\t\tUpdate[\"ep\"] -= 20;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"sp\"] > 99) {\n\t\t\t\t\t\tUpdate[\"pp\"] += 1;\n\t\t\t\t\t\tUpdate[\"sp\"] -= 100;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"cp\"] > 999) {\n\t\t\t\t\t\tUpdate[\"pp\"] += 1;\n\t\t\t\t\t\tUpdate[\"cp\"] -= 1000;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(`Not enough money to do that.`);\n\t\t\t\t\t}\n\t\t\t\t\tUpdate = changeValue(Update, { pp: 0, gp: 0, ep: 0, sp: 0, cp: 0 });\n\t\t\t}\n\t\t}\n\t}\n\treturn Update;\n}\n\nfunction divideValue(Object, Value) {\n\tif (Value === 1) return Object;\n\tlet remainder = 0;\n\tlet Update = { pp: 0, gp: 0, ep: 0, sp: 0, cp: 0, remainder: 0 };\n\n\tfor (let key in Object) {\n\t\tUpdate[key] = Object[key] + remainder;\n\t\tremainder = Object[key] % Value;\n\t\tif (Update[key] > 0) Update[key] = Math.floor(Update[key] / Value);\n\t\tif (Update[key] < 0) Update[key] = Math.ceil(Update[key] / Value);\n\t\tif (remainder !== 0) {\n\t\t\tif (key === \"ep\") { remainder *= 5; }\n\t\t\telse if (key === \"gp\") { remainder *= 2; }\n\t\t\telse { remainder *= 10; }\n\t\t}\n\t}\n\tUpdate.remainder = remainder / 10;\n\treturn Update;\n}","author":"oYLBQUHyYQcwtcvC","img":"icons/commodities/currency/coins-plain-stack-gold.webp","actorIds":[],"_id":"9k884BCFs3qxDGbS"}
{"name":"RollTable: Erro Crítico","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Erro Critico","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.6hk7C0lo4e3j41i5"}},"scope":"global","command":"game.tables.getName(\"Erro Crítico\").draw();","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/d20-black.svg","actorIds":[],"_id":"AUcNgt9w4YTl32m2"}
{"name":"RollTable: Acerto Crítico","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Acerto Crítico","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.OvHgmENp3JOALHKd"}},"scope":"global","command":"game.tables.getName(\"Acerto Crítico\").draw();","author":"oYLBQUHyYQcwtcvC","img":"icons/d20.png","actorIds":[],"_id":"B1pGw4W7ob9OApCC"}
{"name":"Actor Update ID to names","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"furnace":{"runAsGM":true}},"scope":"global","command":"game.journal.forEach(entry => {\r\n  let content = entry.data.content;\r\n  let matches = content.match(/@\\w*\\[([0-9A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ.\\- ]+)\\]/g);\r\n  \r\n  // now we have an array of things such as @Actor[5c8HWfrpvRV4XtZ1]\r\n  if(matches == null) return;\r\n  let newcontent = content;\r\n  let uniqueMatches = matches\r\n    .filter((value, index, self) => self.indexOf(value) === index) //unique matches\r\n    .forEach(str => {\r\n      let arrayData = str.slice(1, -1).split('['); // cut off the @ and ] then make [0] the type and [1] the id.\r\n      // since the reference may not match directly with the game entity type, lets look that up.\r\n      //console.log(arrayData)\r\n      let entityType = getEntityType(arrayData[0]);\r\n      let packname;\r\n      if(entityType == 'packs'){\r\n       let pck =  arrayData[1].split('.');\r\n       packname = `${pck[0]}.${pck[1]}`;\r\n       arrayData[1] = pck[2];\r\n      }\r\n      let id = arrayData[1];\r\n      let name;\r\n      // with the id and our entity type, look up the name of the entry.\r\n      if(entityType == 'packs'){\r\n          let packs = game[entityType].get(packname);\r\n          let pindex = packs.index.find(element => element._id === id) || packs.index.find(element => element.name === id);\r\n          //console.log(packs);\r\n          if(!pindex)\r\n            return ui.notifications.error(`Could not find any record for the entity type ${entityType} in pack ${packs.name} with the id of ${id}`);\r\n          name = pindex.name;\r\n      }else{\r\n          name = game[entityType].get(id)?.name;\r\n      }\r\n      //console.log(name)\r\n      if (!name) {\r\n        return ui.notifications.error(`Could not find any record for the entity type ${entityType} with the id of ${arrayData[0]}`);\r\n      }\r\n\r\n      // replace the ID with the name.\r\n      console.log(`updating ${id} with ${name}`);\r\n\r\n      let regEx = new RegExp(id, 'g');\r\n      newcontent = newcontent.replace(regEx, name);\r\n      //console.log(newcontent)\r\n    }); \r\n  entry.update({ content: newcontent });\r\n});\r\n\r\nfunction getEntityType(entity) {\r\n  switch (entity) {\r\n    case 'JournalEntry': return 'journal';\r\n    case 'RollTable': return 'tables';\r\n    case 'Compendium': return 'packs';\r\n    default: return entity.toLowerCase() + 's';\r\n  }\r\n}","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"D6SIWJbVHF0f7aBs"}
{"name":"Edit Compendiums","permission":{"default":0,"hfVBUA9x0nVqLlXX":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let packname = \"innocenti-worlds.handout\";\r\n//let newpackname = \"innocenti-worlds.citys\";\r\n//let oldpackname = \"mod-my-world.citys\";\r\n\r\nlet pack = game.packs.get(packname);\r\nlet cpack = await pack.getContent();\r\ncpack.forEach(entry => {\r\nlet content = entry.data.content;\r\n//let matches = content.match(/@\\w*\\[([\\w.-]+)\\]\\{([\\w.-\\s]+)\\}/g);\r\n//var newstring = content.replace(/(mod[-]my[-]world)/, \"innocenti-worlds\");\r\n//newstring = newstring.replace(\"mod-my-world.locals\", \"innocenti-worlds.locals\");\r\nlet matches = content.replace(/mod-my-world/g, 'innocenti-worlds');\r\nentry.update({ content:  matches}); \r\n})\r\n\r\nawait console.log(\"FIM\");\r\n\r\n","author":"hfVBUA9x0nVqLlXX","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"IEhvAtNQo7hIBUTv"}
{"name":"Update Cite Journal","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"const actorNames = game.actors.map(actor => actor.name).filter((value, index, self) => self.indexOf(value) === index);\r\nconst journalNames = game.journal.map(journal => journal.name).filter((value, index, self) => self.indexOf(value) === index);\r\n\r\nconst indexCite = {\r\n    Actor: actorNames,\r\n    JournalEntry: journalNames\r\n    }\r\n\r\ngame.journal.forEach(entry => {\r\n    //console.log(entry.entity)\r\n    let newcontent = entry.data.content;\r\n    for(const [key, value] of Object.entries(indexCite)){\r\n        let entityType = key;\r\n        for (let i = 0; i < value.length; i++) {\r\n            let strName = value[i];\r\n            let str = `(?!\\\\[)\\\\b${strName}\\\\b(?![\\\\w\\\\s]*[\\\\]\\\\}])`;\r\n            //let str = `\\\\b${strName}(?=[^\\\\}\\\\]\\\\w])`;\r\n            let regEx = new RegExp(str, 'g');\r\n            if(value[i] != entry.name){\r\n                //console.log(regEx);\r\n                newcontent = newcontent.replace(regEx, `@${entityType}[${value[i]}]{${value[i]}}`);\r\n            }else{\r\n               newcontent = newcontent.replace(regEx, `<strong>${value[i]}</strong>`); \r\n            }\r\n        }\r\n        //console.log(newcontent);\r\n        entry.update({ content: newcontent });\r\n    }\r\n    //console.log(newcontent);\r\n    console.log(\"FIM\");\r\n});\r\nfunction escapeRegExp(string) {\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n}","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"Io6kAw1BSkK3mE50"}
{"name":"Remove Flags","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"for (let t of canvas.tokens.placeables) {\r\nif(t.getFlag(`world`, `worldTrigger`))\r\n        await t.unsetFlag(`world`, `worldTrigger`);\r\n}\r\nawait console.log(\"Fim dos tokens\");\r\nawait console.log(canvas.tokens.controlled[0].data.flags);\r\nfor (let t of game.users) {\r\nif(t.getFlag(`world`, `worldTrigger`))\r\n        await t.unsetFlag(`world`, `worldTrigger`);\r\n}\r\nawait console.log(\"Fim dos usuários\");\r\nawait console.log(game.user.data.flags);","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"OyRBjXCnTLP2Oie2"}
{"_id":"QXuPIQKeXtB9zP1U","name":"Import from Compendium","permission":{"default":0,"hfVBUA9x0nVqLlXX":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"/**\r\n * Macro that will create a Folder with same name of Compendium,\r\n * then import entire compendium into created folder\r\n *\r\n * Thanks to Atropos for optimizing import\r\n *\r\n * @author Forien#2130\r\n * @url https://patreon.com/forien\r\n * @author Atropos\r\n * @licence MIT\r\n */\r\n// provide identifier of compendium. Use F12->Inspect Tool if necessary\r\n\r\nlet packOptions = game.packs.map(pack => `<option value=\"${pack.collection}\">${pack.title}</option>`);\r\n\r\nconst form = `\r\n  <div style=\"display: inline-block; width: 100px\">Compendium:</div>\r\n  <select id=\"destinationPack\" />\r\n    ${packOptions}\r\n  </select>\r\n  <br />\r\n`;\r\nconst dialog = new Dialog({\r\n    title: \"Import Compendium in folder\",\r\n    content: form,\r\n    buttons: {\r\n        use: {\r\n            label: \"Apply\",\r\n            callback: importPack\r\n        }\r\n    }\r\n}).render(true);\r\n\r\n\r\nasync function importPack(html) {\r\n    const packName = html.find(`select#destinationPack`)[0].value;\r\n    const pack = game.packs.get(packName);\r\n    const entity = pack.entity;\r\n    const entityClass = CONFIG[entity].entityClass;\r\n\r\n    const content = await pack.getContent();\r\n    const folder = await Folder.create({ name: pack.metadata.label, type: entity, parent: null });\r\n    const createData = content.map(c => {\r\n        c.data.folder = folder._id;\r\n        return c.data;\r\n    });\r\n\r\n    return entityClass.create(createData);\r\n}","author":"hfVBUA9x0nVqLlXX","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Xp Awards","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.EGfQmoaYhxu0EqxS"}},"scope":"global","command":"(function () {\n\tfunction award_xp(type, amount) {\n\t\tlet actors = game.actors.entities.filter(e => e.data.type === 'character' && e.hasPlayerOwner);\n\t\tlet isShared = type == \"shared\";\n\t\tconsole.log(type + ' ' + amount);\n\t\tif (Number.isInteger(amount) && actors.length > 0) {\n\t\t\tlet totalAmount = isShared ? amount : amount * actors.length;\n\t\t\tlet individualAmount = isShared ? Math.floor(amount / actors.length) : amount\n\n\t\t\tlet chatContent = `\n\t\t\t<h1><img src=\"icons/commodities/treasure/crown-gold-laurel-wreath.webp\" width=\"50px\" /> XP Awards</h1>\n\t\t\t<b>${totalAmount} Experience Awarded!</b>\n\t\t\t<br>${individualAmount} added to:\n\t\t\t`;\n\n\t\t\tactors.forEach(actor => {\n\t\t\t\tchatContent += `<br>${actor.name}`;\n\t\t\t\tactor.update({\n\t\t\t\t\t\"data.details.xp.value\": actor.data.data.details.xp.value + individualAmount\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tlet chatData = {\n\t\t\t\tuser: game.user._id,\n\t\t\t\tspeaker: ChatMessage.getSpeaker(),\n\t\t\t\tcontent: chatContent,\n\t\t\t\ttype: CONST.CHAT_MESSAGE_TYPES.OTHER\n\t\t\t};\n\t\t\tChatMessage.create(chatData);\n\t\t}\n\t}\n\n\tnew Dialog({\n\t\ttitle: \"Award Party XP\",\n\t\tcontent: `\n\t <p>Select a type and an amount. Individual xp will give or take a set amount to/from each party member, whereas shared will split an amount evenly.</p>\n\t <form>\n\t  <div class=\"form-group\">\n\t   <label>Type:</label>\n\t   <select id=\"xp-type\">\n\t\t<option value=\"individual\">individual</option>\n\t\t<option value=\"shared\">shared</option>\n\t   </select>\n\t  </div>\n\t  <div class=\"form-group\">\n\t   <label>Amount</label>\n\t   <input type=\"text\" inputmode=\"numeric\" pattern=\"\\d*\" id=\"xp-amount\">\n\t  </div>\n\t </form>\n\t `,\n\t\tbuttons: {\n\t\t\tone: {\n\t\t\t\ticon: '<i class=\"fas fa-check\"></i>',\n\t\t\t\tlabel: \"Confirm\",\n\t\t\t\tcallback: (html) => {\n\t\t\t\t\tlet type = html.find('[id=xp-type]')[0].value;\n\t\t\t\t\tlet amount = parseInt(html.find('[id=xp-amount]')[0].value);\n\t\t\t\t\taward_xp(type, amount);\n\t\t\t\t}\n\t\t\t},\n\t\t\ttwo: {\n\t\t\t\ticon: '<i class=\"fas fa-times\"></i>',\n\t\t\t\tlabel: \"Cancel\",\n\t\t\t}\n\t\t},\n\t\tdefault: \"Cancel\"\n\t}).render(true);\n})();","author":"oYLBQUHyYQcwtcvC","img":"icons/commodities/treasure/crown-gold-laurel-wreath.webp","actorIds":[],"_id":"UlmaOxktSvc5ND6N"}
{"name":"Fix Actors (change compendium links)","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"furnace":{"runAsGM":true}},"scope":"global","command":"//TROCA OS LINKS DE COMPENDIUM PARA LINKS DO MUNDO.\r\n// COM ECXESSÃO DOS ITEMS QUE MANTÉM NO COMPENDIUM\r\ngame.actors.forEach(entry => {\r\n    let content = entry.data.data.details.biography.value;\r\n    let matches = content.match(/@\\w*\\[([0-9A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ.\\- ]+)\\]?(\\{([0-9A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ;&.\"()\\- ]+)\\})/g);\r\n\r\n    // now we have an array of things such as @Actor[5c8HWfrpvRV4XtZ1]\r\n    if (matches == null) return;\r\n    let newcontent = content;\r\n    let uniqueMatches = matches\r\n        .filter((value, index, self) => self.indexOf(value) === index) //unique matches\r\n        .forEach(str => {\r\n            let firstdata = str.slice(0, -1).split('{');\r\n            let pName = firstdata[1];\r\n            //console.log(firstdata);\r\n            let arrayData = firstdata[0].slice(1, -1).split('['); // cut off the @ and ] then make [0] the type and [1] the id.\r\n            // since the reference may not match directly with the game entity type, lets look that up.\r\n            //console.log(arrayData, pName)\r\n            if (arrayData[0] != 'Compendium') return;\r\n            let pck = arrayData[1].split('.');\r\n            let packname = `${pck[0]}.${pck[1]}`;\r\n            //console.log(packname);\r\n            let id = pck[2];\r\n            let entityType = getEntityType(arrayData[0]);\r\n            \r\n            // with the id and our entity type, look up the name of the entry.\r\n            let packs = game[entityType].get(packname);\r\n            \r\n            if(packs == null){ return console.log(`Não Existe Um compendium com o nome: ${packname} com o item ${entry.name}`)}\r\n            let newEntity = packs.entity;\r\n            //console.log(newEntity);\r\n            if (newEntity === 'Item') return;\r\n            let pindex = packs.index.find(element => element._id === id) || packs.index.find(element => element.name === pName);\r\n            \r\n            if (!pindex) {\r\n                //console.log(packs.index.find(element => element.name == pName), pName, newEntity, packname);\r\n                //return ui.notifications.error(`Could not find any record for the entity type ${entityType} in pack ${packs} with the id of ${id}`);\r\n            }\r\n            let name = (pindex) ? pindex.name : htmlDecode(pName);\r\n            //console.log(name);\r\n\r\n            if (!name) {\r\n                return ui.notifications.error(`Could not find any record for the entity type ${entityType} with the id of ${arrayData[0]}`);\r\n            }\r\n            let changeEntry = (name !== '') ? `@${packs.entity}[${name}]` : '';\r\n            //console.log(changeEntry);\r\n            let newstr = escapeRegExp(firstdata[0]);\r\n            console.log(`updating ${id} with ${name}`);\r\n            let regEx = new RegExp(newstr, 'g');\r\n            //console.log(regEx);\r\n            newcontent = newcontent.replace(regEx, changeEntry);\r\n            //console.log(newcontent);\r\n        });\r\n    entry.update({ 'data.details.biography.value': newcontent });\r\n});\r\nconsole.log(\"FIM\");\r\n\r\nfunction escapeRegExp(string) {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n}\r\nfunction getEntityType(entity) {\r\n    switch (entity) {\r\n        case 'JournalEntry': return 'journal';\r\n        case 'RollTable': return 'tables';\r\n        case 'Compendium': return 'packs';\r\n        default: return entity.toLowerCase() + 's';\r\n    }\r\n}\r\nfunction htmlDecode(input) {\r\n  var doc = new DOMParser().parseFromString(input, \"text/html\");\r\n  return doc.documentElement.textContent;\r\n}","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"XM4Q96Ue8YW8MO95"}
{"name":"Update tokens to Actor","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro     ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.e2GlJgVWO1lO4m75"}},"scope":"global","command":"(async () => {\r\n  let updates = canvas.scene.data.tokens.map(t => {\r\n    let tactor = game.actors.entities.find(a => a.name === t.name);\r\n        if (tactor) {\r\n            return {\r\n                _id: t._id,\r\n                actorId: tactor.id\r\n            }\r\n        } else {\r\n            console.log(t.name);\r\n            return {\r\n                _id: t._id,\r\n                actorId: \"\"\r\n            }\r\n        }\r\n  });\r\n  await canvas.scene.updateEmbeddedEntity(\"Token\", updates);\r\n})();","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"bHDOdpzjo0a9ACf1"}
{"name":"Update Tiles","permission":{"default":0,"hfVBUA9x0nVqLlXX":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let addr = \"assets/scenes/background/\";\r\nfor (let tiles of canvas.tiles.placeables) {\r\nlet oldimg = tiles.data.img;\r\nvar newstring = oldimg.replace(\"modules/mod-my-world/assets/scenes/background/\", addr);\r\nconsole.log(newstring);\r\ntiles.update({img:`${newstring}`});\r\n}\r\n//canvas.tiles.placeables[0].update({img:\"assets/scenes/background/The_Dessarin_Valley/tile_31.png\"})","author":"hfVBUA9x0nVqLlXX","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"dK5JNJJ3FXnhjCsJ"}
{"name":"Update Cite e Bio","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"const actorNames = game.actors.map(actor => actor.name).filter((value, index, self) => self.indexOf(value) === index);\r\nconst journalNames = game.journal.map(journal => journal.name).filter((value, index, self) => self.indexOf(value) === index);\r\n\r\nconst indexCite = {\r\n    Actor: actorNames,\r\n    JournalEntry: journalNames\r\n    }\r\n\r\ngame.actors.forEach(entry => {\r\n    //console.log(entry.entity)\r\n    let newcontent = entry.data.data.details.biography.value;\r\n    for(const [key, value] of Object.entries(indexCite)){\r\n        let entityType = key;\r\n        for (let i = 0; i < value.length; i++) {\r\n            if(value[i] != entry.name){\r\n            //let strName = escapeRegExp(value[i]);\r\n            let str = `(?!\\\\[)\\\\b${value[i]}\\\\b(?![\\\\w\\\\s]*[\\\\]\\\\}])`;\r\n            //console.log(str);\r\n            let regEx = new RegExp(str, 'g');\r\n            if(value[i] != entry.name){\r\n                //console.log(regEx);\r\n                newcontent = newcontent.replace(regEx, `@${entityType}[${value[i]}]{${value[i]}}`);\r\n            }else{\r\n               newcontent = newcontent.replace(regEx, `<strong>${value[i]}</strong>`); \r\n            }}\r\n        }\r\n        //console.log(newcontent);\r\n        entry.update({ 'data.details.biography.value': newcontent });\r\n    }\r\n    console.log(\"FIM\");\r\n});\r\nfunction escapeRegExp(string) {\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n}","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"eUdSjjf2U6Zthw0t"}
{"name":"Folder to Compendium","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"/**\r\n * Import folder into writable compendium. Locked compendiums will not show as an option.\r\n * Folder type is optional, however will help if you have the same folder name across multiple system types.\r\n * Also contains options to store subfolder contents, update existing records (or only add new), and delete duplicate records.\r\n * Author: KrishMero#1792\r\n */\r\n\r\nlet packOptions = game.packs.filter(pack => !pack.locked).map(pack => `<option value=\"${pack.collection}\">${pack.title}</option>`);\r\nlet entityType = COMPENDIUM_ENTITY_TYPES.map(type => `<option value=\"${type}\">${type}</option>`);\r\nconst form = `\r\n  <div style=\"display: inline-block; width: 100px\">Folder:</div>\r\n  <input type=\"string\" id=\"folderName\">\r\n  <br />\r\n\r\n  <div style=\"display: inline-block; width: 100px\">Folder Type:</div>\r\n  <select id=\"entityType\" />\r\n    <option value=\"\">--</option>\r\n    ${entityType}\r\n  </select>\r\n  <br />\r\n\r\n  <div style=\"display: inline-block; width: 100px\">Compendium:</div>\r\n  <select id=\"destinationPack\" />\r\n    ${packOptions}\r\n  </select>\r\n  <br />\r\n\r\n  <label>\r\n    <input type=\"checkbox\" id=\"recurse\" checked/>\r\n    Store subfolders too\r\n  </label>\r\n  <br />\r\n\r\n  <label>\r\n    <input type=\"checkbox\" id=\"update\" checked/>\r\n    Update existing records (unchecked = only add new)\r\n  </label>\r\n  <br />\r\n\r\n  <label>\r\n    <input type=\"checkbox\" id=\"delete\" checked/>\r\n    Delete duplicates\r\n  </label>\r\n`;\r\n\r\nconst dialog = new Dialog({\r\n  title: \"Store folder in compendium\",\r\n  content: form,\r\n  buttons: {\r\n    use: {\r\n      label: \"Apply\",\r\n      callback: storeFolder\r\n    }\r\n  }\r\n}).render(true);\r\n\r\nfunction storeFolder(html) {\r\n  const folderName = html.find(`input#folderName`)[0].value;\r\n  const folderType = html.find(`select#entityType`)[0].value;\r\n  const destinationPack = html.find(`select#destinationPack`)[0].value;\r\n  const recurse = html.find(`input#recurse`)[0].checked;\r\n  const update = html.find(`input#update`)[0].checked;\r\n  const deleteRecords = html.find(`input#delete`)[0].checked;\r\n  \r\n  let folders = game.folders.filter(f => f.name === folderName);\r\n  if (folderType) {\r\n    folders = folders.filter(f => f.type === folderType);\r\n  }\r\n  if (folders.length === 0) {\r\n    ui.notifications.error(`Your world does not have any folders named '${folderName}'.`);\r\n  }\r\n  else if(folders.length > 1) {\r\n    ui.notifications.error(`Your world has more than one folder named ${folderName}`) \r\n  }\r\n  else {\r\n    console.log(`storing in ${destinationPack}`);\r\n    let packObject = game.packs.get(destinationPack);\r\n    storeRecursively(folders[0], packObject, recurse, update, deleteRecords);\r\n    ui.notifications.notify(`'${folderName}' stored successfully in '${packObject.title}'.`);\r\n  }\r\n}\r\n\r\nfunction storeRecursively(currentFolder, packObject, recurse, update, deleteRecords) {\r\n  console.log('store recursively for ' + currentFolder.name);\r\n  if (currentFolder.content) {\r\n    currentFolder.content.map(item => {\r\n      console.debug(\"  Item:\", item.data.name);\r\n      let existingRecords = packObject.index.filter(i => i.name === item.data.name);\r\n      if (item.data.name === 'Augury') {\r\n        console.log(existingRecords);\r\n        console.log(existingRecords.length);\r\n      }\r\n\r\n      // Delete all but the first duplicate.\r\n      if(existingRecords.length > 1) {\r\n        if (deleteRecords) {\r\n          console.log(existingRecords);\r\n          existingRecords.shift();\r\n          existingRecords.map(record => packObject.deleteEntity(record._id));\r\n        } else {\r\n          console.log(`Skipped: ${existingRecords[0].name}`)\r\n          ui.notifications.error(`Can't store '${existingRecords[0].name}' as multiple records were found. Delete the extras or check 'Delete duplicates'. Logged to console.`);\r\n        }\r\n      }\r\n\r\n      if (existingRecords.length === 1 && update) {\r\n        packObject.updateEntity(existingRecords[0]);\r\n      } else if (!existingRecords.length) {\r\n        packObject.createEntity(item);\r\n      }\r\n      \r\n    });\r\n  }\r\n\r\n  if (currentFolder.children && recurse) {\r\n    currentFolder.children.map(({ data }) => {\r\n      storeRecursively(\r\n        game.folders.entities.filter(f => f.data._id == data._id)[0],\r\n        packObject,\r\n        recurse, \r\n        update,\r\n        deleteRecords\r\n      );\r\n    });\r\n  }\r\n}","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"hNUyZeNQwLCqMa1c"}
{"name":"Fix Journals (change compendium links)","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"furnace":{"runAsGM":true}},"scope":"global","command":"//TROCA OS LINKS DE COMPENDIUM PARA LINKS DO MUNDO.\r\n// COM ECXESSÃO DOS ITEMS QUE MANTÉM NO COMPENDIUM\r\nlet count = 0;\r\ngame.journal.forEach(entry => {\r\n    let content = entry.data.content;\r\n    let matches = content.match(/@\\w*\\[([0-9A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ.\\- ]+)\\]?(\\{([0-9A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ;&.\"()\\- ]+)\\})/g);\r\n\r\n    // now we have an array of things such as @Actor[5c8HWfrpvRV4XtZ1]\r\n    if (matches == null) return;\r\n    let newcontent = content;\r\n    \r\n    let uniqueMatches = matches\r\n        .filter((value, index, self) => self.indexOf(value) === index) //unique matches\r\n        .forEach(str => {\r\n            count++;\r\n            let firstdata = str.slice(0, -1).split('{');\r\n            let pName = firstdata[1];\r\n            //console.log(firstdata);\r\n            let arrayData = firstdata[0].slice(1, -1).split('['); // cut off the @ and ] then make [0] the type and [1] the id.\r\n            // since the reference may not match directly with the game entity type, lets look that up.\r\n            //console.log(arrayData, pName)\r\n            if (arrayData[0] != 'Compendium') return;\r\n            let pck = arrayData[1].split('.');\r\n            let packname = `${pck[0]}.${pck[1]}`;\r\n            //console.log(packname);\r\n            let id = pck[2];\r\n            let entityType = getEntityType(arrayData[0]);\r\n            \r\n            // with the id and our entity type, look up the name of the entry.\r\n            let packs = game[entityType].get(packname);\r\n            \r\n            if(packs == null){ return console.log(`Não Existe Um compendium com o nome: ${packname} com o item ${entry.name}`)}\r\n            let newEntity = packs.entity;\r\n            //console.log(newEntity);\r\n            if (newEntity === 'Item') return;\r\n            let pindex = packs.index.find(element => element._id === id) || packs.index.find(element => element.name === pName);\r\n            \r\n            if (!pindex) {\r\n                //console.log(packs.index.find(element => element.name == pName), pName, newEntity, packname);\r\n                //return ui.notifications.error(`Could not find any record for the entity type ${entityType} in pack ${packs} with the id of ${id}`);\r\n            }\r\n            let name = (pindex) ? pindex.name : htmlDecode(pName);\r\n            console.log(name);\r\n\r\n            if (!name) {\r\n                return ui.notifications.error(`Could not find any record for the entity type ${entityType} with the id of ${arrayData[0]}`);\r\n            }\r\n            let changeEntry = (name !== '') ? `@${packs.entity}[${name}]` : '';\r\n            //console.log(changeEntry);\r\n            let newstr = escapeRegExp(firstdata[0]);\r\n            console.log(`updating ${id} with ${name}`);\r\n            let regEx = new RegExp(newstr, 'g');\r\n            //console.log(regEx);\r\n            newcontent = newcontent.replace(regEx, changeEntry);\r\n            //console.log(newcontent);\r\n        });\r\n    entry.update({ content: newcontent });\r\n});\r\nconsole.log(count);\r\n\r\nfunction escapeRegExp(string) {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n}\r\nfunction getEntityType(entity) {\r\n    switch (entity) {\r\n        case 'JournalEntry': return 'journal';\r\n        case 'RollTable': return 'tables';\r\n        case 'Compendium': return 'packs';\r\n        default: return entity.toLowerCase() + 's';\r\n    }\r\n}\r\n\r\nfunction htmlDecode(input) {\r\n  var doc = new DOMParser().parseFromString(input, \"text/html\");\r\n  return doc.documentElement.textContent;\r\n}","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"jzLZKAYBAimx2b9W"}
{"name":"Journals Update ID to names","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"furnace":{"runAsGM":true}},"scope":"global","command":"game.journal.forEach(entry => {\r\n  let content = entry.data.content;\r\n  let matches = content.match(/@\\w*\\[([0-9A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ.\\- ]+)\\]/g);\r\n  \r\n  // now we have an array of things such as @Actor[5c8HWfrpvRV4XtZ1]\r\n  if(matches == null) return;\r\n  let newcontent = content;\r\n  let uniqueMatches = matches\r\n    .filter((value, index, self) => self.indexOf(value) === index) //unique matches\r\n    .forEach(str => {\r\n      let arrayData = str.slice(1, -1).split('['); // cut off the @ and ] then make [0] the type and [1] the id.\r\n      // since the reference may not match directly with the game entity type, lets look that up.\r\n      //console.log(arrayData)\r\n      let entityType = getEntityType(arrayData[0]);\r\n      let packname;\r\n      if(entityType == 'packs'){\r\n       let pck =  arrayData[1].split('.');\r\n       packname = `${pck[0]}.${pck[1]}`;\r\n       arrayData[1] = pck[2];\r\n      }\r\n      let id = arrayData[1];\r\n      let name;\r\n      // with the id and our entity type, look up the name of the entry.\r\n      if(entityType == 'packs'){\r\n          let packs = game[entityType].get(packname);\r\n          let pindex = packs.index.find(element => element._id === id) || packs.index.find(element => element.name === id);\r\n          //console.log(packs);\r\n          if(!pindex)\r\n            return ui.notifications.error(`Could not find any record for the entity type ${entityType} in pack ${packs.name} with the id of ${id}`);\r\n          name = pindex.name;\r\n      }else{\r\n          name = game[entityType].get(id)?.name;\r\n      }\r\n      //console.log(name)\r\n      if (!name) {\r\n        return ui.notifications.error(`Could not find any record for the entity type ${entityType} with the id of ${arrayData[0]}`);\r\n      }\r\n\r\n      // replace the ID with the name.\r\n      console.log(`updating ${id} with ${name}`);\r\n\r\n      let regEx = new RegExp(id, 'g');\r\n      newcontent = newcontent.replace(regEx, name);\r\n      //console.log(newcontent)\r\n    }); \r\n  entry.update({ content: newcontent });\r\n});\r\n\r\nfunction getEntityType(entity) {\r\n  switch (entity) {\r\n    case 'JournalEntry': return 'journal';\r\n    case 'RollTable': return 'tables';\r\n    case 'Compendium': return 'packs';\r\n    default: return entity.toLowerCase() + 's';\r\n  }\r\n}","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"qJncCezSSAFTtpkD"}
{"name":"RollTable: Orientation","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Orientation","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.DtbUXPYO1rOkzR7v"}},"scope":"global","command":"game.tables.getName(\"Orientation\").draw();","author":"oYLBQUHyYQcwtcvC","img":"icons/tools/navigation/compass-brass-blue-red.webp","actorIds":[],"_id":"rQGQSQ8d0XVSfcMJ"}
{"name":"Create Tables By Rarity","permission":{"default":0,"XH24HWwqaZhSywRV":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"game.betterTables.createTableFromCompendium(\"Full Table Fishs\",\r\n    //\"dnd5e.items\",\r\n    \"mod-my-world.item-foods\",\r\n    { weightPredicate: predicate }\r\n);\r\n\r\nfunction predicate(entity) {\r\n    if(entity.type != \"loot\") return 0;\r\n    //if(entity.data.data.consumableType != \"food\") return 0;\r\n    if(entity.data.data.source != \"Fish\") return 0;\r\n    switch (entity.data.data.rarity) {\r\n        case \"Common\":\r\n            return 16;\r\n        case \"Uncommon\":\r\n            return 8;\r\n        case \"Rare\":\r\n            return 4;\r\n        case \"Very rare\":\r\n            return 2;\r\n        case \"Legendary\":\r\n            return 1;\r\n        default:\r\n            return 0;\r\n    }\r\n}","author":"XH24HWwqaZhSywRV","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"uqhL0gLIVUzjDden"}
{"name":"UpdateTempHP","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.bSCkCnCQEFavrBYl"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nif (!target) {\n  ChatMessage.create({content: `Token ${args[1]} is no longer in scene`, whisper: ChatMessage.getWhisperIDs(\"GM\")})\n  return;\n}\nlet increment = args[2];\nlet temphpMax = (target.actor.data.data.attributes.hp.tempmax < increment)? increment:target.actor.data.data.attributes.hp.tempmax;\nlet temphp = (target.actor.data.data.attributes.hp.tempmax < increment)? increment:target.actor.data.data.attributes.hp.temp;\n\nif (args[0] === \"on\") {\n  target.actor.update({\"data.attributes.hp.tempmax\": temphpMax, \"data.attributes.hp.temp\": temphp})\nChatMessage.create({content: `Meal: ${target.name} received ${increment} HP temp`})\n} else {\n  target.actor.update({\"data.attributes.hp.tempmax\": 0, \"data.attributes.hp.temp\": 0})\nChatMessage.create({content: `Meal Expiry: ${target.name} Temp HP reduced by 0`})\n}","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"vOsmFx24W2swqs7B"}
